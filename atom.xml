<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neverland</title>
  
  <subtitle>你是我不愿醒来的梦啊&lt;br&gt;真是柔情一场</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ir1d.cf/"/>
  <updated>2019-06-21T15:50:25.777Z</updated>
  <id>https://ir1d.cf/</id>
  
  <author>
    <name>Ir1d</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>概统期末复习</title>
    <link href="https://ir1d.cf/2019/06/21/%E6%A6%82%E7%BB%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>https://ir1d.cf/2019/06/21/概统期末复习/</id>
    <published>2019-06-21T15:47:16.000Z</published>
    <updated>2019-06-21T15:50:25.777Z</updated>
    
    <content type="html"><![CDATA[<ul><li>概统复习得很用心了，成绩也还算可以吧。。虽然和别人比菜了好多，但是是我目前为止分数最高的数学课了</li></ul><a id="more"></a><p><img src="https://user-images.githubusercontent.com/10709657/59337773-cf2a1180-8d33-11e9-9e5f-4bc6770ef5f4.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59337811-da7d3d00-8d33-11e9-87f1-7b67260cf66b.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59337885-f7197500-8d33-11e9-8063-d415892f32bb.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59337906-fed91980-8d33-11e9-9503-52b4592095e2.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59338069-495a9600-8d34-11e9-810d-36d7a784faad.png" alt="image"></p><p>正态总体之样本均值与样本方差的一些结论<br>Lecture 7</p><p>同济三版：P169 7.22 最小/大 统计量 f_n = 1 - [1 - f] ^ n</p><p>拉格朗日乘数<br><img src="https://user-images.githubusercontent.com/10709657/59398051-55406980-8dc1-11e9-9b89-3b3d233406f9.png" alt="image"></p><p>P186 习题 8<br><img src="https://user-images.githubusercontent.com/10709657/59400228-51184a00-8dc9-11e9-8d06-e537a01670af.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59400272-7b6a0780-8dc9-11e9-84fd-1802932cb628.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59400280-80c75200-8dc9-11e9-9303-1d364753894b.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59400554-59bd5000-8dca-11e9-8117-b73e3b44fa51.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59400798-3b0b8900-8dcb-11e9-9f14-1253c739c9ab.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59400819-4b236880-8dcb-11e9-9f33-fbf4327eea77.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59400836-5aa2b180-8dcb-11e9-81db-c6ea334fcc99.png" alt="image"><br>矩估计法得到的估计量一般为一致估计量<br>在一定条件下, 极大似然估计也具有一致性</p><p><img src="https://user-images.githubusercontent.com/10709657/59405282-88442680-8ddc-11e9-9862-6387b8a458a7.png" alt="image"><br>对于单侧检验, 通常把希望的结果(或预计的结果)的反面取作 H</p><p>记第一类错误的概率为 (恰好为显著性 水平 alpha<br><img src="https://user-images.githubusercontent.com/10709657/59406387-8c724300-8de0-11e9-9027-c45851f8eb0d.png" alt="image"><br>在控制犯第一类错误的概率 alpha 的原则下， 通常将有把握的、有经验的结论作为原假 尽可能使后果严重的错误成为第一类错误<br>无偏检验 要求一个检验犯第一类错误的概率总不超过不犯第二类错误的概率<br><img src="https://user-images.githubusercontent.com/10709657/59407060-b0cf1f00-8de2-11e9-8ddb-934d39a23190.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59407066-b593d300-8de2-11e9-96a5-0930bc1153c5.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59407232-33f07500-8de3-11e9-9b4b-be7429627ddc.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59407240-38b52900-8de3-11e9-9edd-aebc1f420243.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59407245-3ce14680-8de3-11e9-8f6f-04bb1fd789d2.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59408032-9a769280-8de5-11e9-8cd1-c56a00872471.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59408044-9f3b4680-8de5-11e9-9f5e-a9172ee24718.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59408053-a3fffa80-8de5-11e9-8ba0-5470becf78ae.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59408508-c21a2a80-8de6-11e9-9f5a-3b6d2560554a.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59408511-c5151b00-8de6-11e9-99c9-bd1cbd86d6af.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59408516-c9d9cf00-8de6-11e9-887f-e6169ff67d09.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59408536-d2320a00-8de6-11e9-8592-b740c8496c0c.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59409294-854f3300-8de8-11e9-8534-b6d625d2a979.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59409381-b4fe3b00-8de8-11e9-9ce4-46abbf159c85.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59409462-dc550800-8de8-11e9-9d97-97cc3a1007d1.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59409581-16260e80-8de9-11e9-9ef5-7312a722a57f.png" alt="image"><br>vi : 频数 npi : 理论频数<br><img src="https://user-images.githubusercontent.com/10709657/59409773-9cdaeb80-8de9-11e9-9b5e-e655fe32e82b.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59409784-a49a9000-8de9-11e9-9d66-af2beea1c47b.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59426905-f3f1b800-8e0b-11e9-9b30-1bf676078336.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59426908-f6541200-8e0b-11e9-871d-044decb804be.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59426914-f9e79900-8e0b-11e9-8d64-cb050997843f.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59427343-01f40880-8e0d-11e9-8f56-1e6c1797dd9d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59427559-8181d780-8e0d-11e9-879c-37d81cfa43a0.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59438333-e47f6880-8e25-11e9-9890-25d9b46684a4.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59438339-e9dcb300-8e25-11e9-9c92-59c193e6eb76.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59442722-5ad39900-8e2d-11e9-84b7-2a74ba8a1940.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59442735-5e672000-8e2d-11e9-8304-d175daafd8a0.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59443697-02050000-8e2f-11e9-9d4d-6f4df44f7194.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59443716-09c4a480-8e2f-11e9-82d4-e8828a1cd746.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59443798-29f46380-8e2f-11e9-9255-0e986092bb12.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59444693-e3076d80-8e30-11e9-8756-8d61b3a73666.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59446419-0e3f8c00-8e34-11e9-8925-0fe94b3765e1.png" alt="image"><br>显著水平越小，接受域的范围越大</p><p><img src="https://user-images.githubusercontent.com/10709657/59563647-349d3b80-906f-11e9-99d9-002602966570.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59563699-f9e7d300-906f-11e9-8d52-3dbce736a0de.png" alt="image"></p><p>9.1 P32 两类错误的关系</p><p><img src="https://user-images.githubusercontent.com/10709657/59564475-ee010e80-9079-11e9-8dcb-cdb4c5f3e428.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59564483-0113de80-907a-11e9-96ba-ae63890ff0eb.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59564493-256fbb00-907a-11e9-9822-b38d0d629aa7.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59564496-315b7d00-907a-11e9-932e-4faa8ad4b021.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59564535-97e09b00-907a-11e9-859a-e71825fe154f.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;概统复习得很用心了，成绩也还算可以吧。。虽然和别人比菜了好多，但是是我目前为止分数最高的数学课了&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="概统" scheme="https://ir1d.cf/tags/%E6%A6%82%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>代组期末复习</title>
    <link href="https://ir1d.cf/2019/06/21/%E4%BB%A3%E7%BB%84%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>https://ir1d.cf/2019/06/21/代组期末复习/</id>
    <published>2019-06-21T15:46:09.000Z</published>
    <updated>2019-06-21T15:47:28.363Z</updated>
    
    <content type="html"><![CDATA[<ul><li>代组我没了。。填空题期望得分太低。。证明题也白给了。。ggggg</li></ul><a id="more"></a><p>第 20 章<br><img src="https://user-images.githubusercontent.com/10709657/59200905-d8986a00-8bcb-11e9-8970-ca4c2fcdcbef.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59203892-17c9b980-8bd2-11e9-9fd6-71e4853899e6.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59204417-29f82780-8bd3-11e9-8e81-ea3f0472bd7e.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59204866-24e7a800-8bd4-11e9-989f-137e0396289e.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59204949-59f3fa80-8bd4-11e9-81f9-5ca088235eb7.png" alt="image"><br>任何一个足够大的结构中必定包含一个给定大小的规则子结构<br>R(a, 2)=R(2, a)=a R(a, b)=R(b, a)<br><img src="https://user-images.githubusercontent.com/10709657/59205415-73497680-8bd5-11e9-9579-af1acd900282.png" alt="image"></p><p>21 章<br><img src="https://user-images.githubusercontent.com/10709657/59210271-cd4f3980-8bdf-11e9-9557-59f68ada3a47.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59210388-11423e80-8be0-11e9-8edd-55b0d465515a.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59210816-089e3800-8be1-11e9-93f7-d15711b00d65.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59211000-66328480-8be1-11e9-9e33-9844b046c181.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59211265-0be5f380-8be2-11e9-9e30-9b717a8706eb.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59211303-1ef8c380-8be2-11e9-8fe1-268038a9eba0.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59211320-2ae48580-8be2-11e9-86f4-ea75cf4cc249.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59211373-42bc0980-8be2-11e9-8b8b-a7655184fc0d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59211572-bc53f780-8be2-11e9-8498-553fe3abe94c.png" alt="image"></p><p>22 章<br><img src="https://user-images.githubusercontent.com/10709657/59240749-ac1a3780-8c37-11e9-87ab-9b07c1322796.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59241558-bbe74b00-8c3a-11e9-8a9f-cb53db1b7e18.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59251563-aaaf3600-8c5c-11e9-8374-f0cbf132a589.png" alt="image"></p><p>特解的求法：f(n)为 n 的 t 次多项式，一般 H*(n)也为 n 的 t 次多项式<br><img src="https://user-images.githubusercontent.com/10709657/59251138-a9313e00-8c5b-11e9-8e1f-f32a09993991.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59251636-db8f6b00-8c5c-11e9-951c-5ff62f74a90c.png" alt="image"><br>错排<br><img src="https://user-images.githubusercontent.com/10709657/59252484-bac81500-8c5e-11e9-82ee-392d24a0d273.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59255982-8d329a00-8c65-11e9-842f-1d38c98eac83.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59256308-44c7ac00-8c66-11e9-96f1-3ddcdca84418.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59257060-cd931780-8c67-11e9-9ed3-940137cbf9a7.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59257038-c409af80-8c67-11e9-8e5e-16c6f5bfd735.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59257769-2e6f1f80-8c69-11e9-8eb9-a583c16134a3.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59261589-57df7980-8c70-11e9-9735-cc3e4782e47a.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59263029-ea811800-8c72-11e9-8eed-e3f6493a6a2c.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59263147-16040280-8c73-11e9-8e9d-831d472afc78.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59264350-8875e200-8c75-11e9-823e-5e71607b657d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59264442-b1967280-8c75-11e9-9005-50dc534b2479.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59264910-bdceff80-8c76-11e9-9333-ec1e7790278c.png" alt="image"></p><p>22 章<br><img src="https://user-images.githubusercontent.com/10709657/59270918-405ebb80-8c85-11e9-917f-a5b14b769ec0.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59271048-9a5f8100-8c85-11e9-9513-b896defd6175.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59271179-dbf02c00-8c85-11e9-8e23-d9d5b2608444.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59271200-e7dbee00-8c85-11e9-973e-f13620c8c6c5.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59271214-eca0a200-8c85-11e9-91eb-882dedce4d43.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59272188-0d69f700-8c88-11e9-8cf1-566ca57f60b2.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59272201-13f86e80-8c88-11e9-9f25-cbb4675d986e.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59272272-4013ef80-8c88-11e9-8e6f-762fae284b6e.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59272304-50c46580-8c88-11e9-998e-8ea0c18fb6d2.png" alt="image"><br>n 元对称群 Sn， 在表示式中具有 r 个不交轮换的置换个数是 第一类 Stirling 数</p><p>n 个不同的球恰好放到 r 个相同的盒子里的方法数称为第二类 Stirling 数，<br><img src="https://user-images.githubusercontent.com/10709657/59272416-92eda700-8c88-11e9-9340-366efea8fdd7.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59272430-9719c480-8c88-11e9-862b-41422d102a78.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59272647-0a233b00-8c89-11e9-95f1-4cb604c33071.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59272735-43f44180-8c89-11e9-8980-11d0f0565bce.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59272843-74d47680-8c89-11e9-939e-bbf1bdf1a0b0.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59272964-bd8c2f80-8c89-11e9-9ef6-d5bf3a189aff.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59272996-d1379600-8c89-11e9-8998-1861fbd98c92.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59273033-e1e80c00-8c89-11e9-8007-e2dbc13dc198.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59317098-17294400-8cf4-11e9-9e13-72ce6b522af9.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59319057-ed741b00-8cfb-11e9-8010-e57773393f37.png" alt="image"><br>Burnside：对于一个置换 f,若一个染色方案 s 经过置换后不变，称 s 为 f 的不动点。将 f 的不动点数目记为 C(f)，则可以证明等价类数目为所有 C(f)的平均值。<br><img src="https://user-images.githubusercontent.com/10709657/59319118-1694ab80-8cfc-11e9-82b9-e0a2d013788d.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59319146-2e6c2f80-8cfc-11e9-91e8-149376357731.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59319908-f74b4d80-8cfe-11e9-8f6e-b2f66e188ec3.png" alt="image"></p><p>画 哈斯图<br>P344 组合恒等式</p><p>1/(1-x)^2 nx^(n-1)</p><p><img src="https://user-images.githubusercontent.com/10709657/59614597-aa7ad300-9153-11e9-98db-a54d4dee40dd.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59617878-b49fd000-9159-11e9-907a-9e175eab8137.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59617881-b6699380-9159-11e9-96d0-f294d22e4a95.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;代组我没了。。填空题期望得分太低。。证明题也白给了。。ggggg&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="代组" scheme="https://ir1d.cf/tags/%E4%BB%A3%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数论期末复习</title>
    <link href="https://ir1d.cf/2019/06/21/%E6%95%B0%E8%AE%BA%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>https://ir1d.cf/2019/06/21/数论期末复习/</id>
    <published>2019-06-21T15:44:23.000Z</published>
    <updated>2019-06-21T15:45:54.474Z</updated>
    
    <content type="html"><![CDATA[<ul><li>初等数论及其应用。。其实有点文科课了。。基本上在背公式。。证明题我是真的没证出来。。tktkddd 轻松秒了</li></ul><a id="more"></a><p><img src="https://user-images.githubusercontent.com/10709657/59699523-483dd300-9224-11e9-8f60-5d1ab1ea10a9.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59702932-71ae2d00-922b-11e9-95b6-7b5482379668.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59734165-e95b7680-9282-11e9-8f69-eebc9043b91a.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59739100-1402fa80-9296-11e9-863e-61fdfbd4bc2a.png" alt="image"><br>如果(𝑎, 𝑏) = 1, 那么(𝑎, 𝑏𝑐) = (𝑎, 𝑐).<br><img src="https://user-images.githubusercontent.com/10709657/59742600-b1632c00-92a0-11e9-8647-a8cb8bbb66b7.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59745286-0e61e080-92a7-11e9-9613-25876620d5f3.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59746961-84b41200-92aa-11e9-9f40-d93efe94822f.png" alt="image"><br>书 P18 找到不小于 𝑎 的最小平方数 𝑠^2<br><img src="https://user-images.githubusercontent.com/10709657/59747706-022c5200-92ac-11e9-8387-94f07a767018.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59747967-ac0bde80-92ac-11e9-8d57-9843236d67f8.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59747983-b4641980-92ac-11e9-924d-409e4fb5e097.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59760075-06fd0000-92c4-11e9-838a-be570eab92cc.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59760755-a7075900-92c5-11e9-8131-da852d431c06.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59762067-ea16fb80-92c8-11e9-88ba-77346aab9974.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59763157-8a6e1f80-92cb-11e9-9ae9-17c88f00a0ee.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59764012-68759c80-92cd-11e9-8b11-679f807c65ea.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59764105-a70b5700-92cd-11e9-9312-183d608c1246.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59764978-8e9c3c00-92cf-11e9-9b02-0811e17c6b89.png" alt="image"><br>2.7 这一节有点难。。<br><img src="https://user-images.githubusercontent.com/10709657/59765227-3154ba80-92d0-11e9-982b-b0503f4a7952.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59765803-71686d00-92d1-11e9-947b-cbba6bbfee51.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59766922-d3c26d00-92d3-11e9-8ad5-45f33c3de3b7.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59767047-0ff5cd80-92d4-11e9-859d-c0b6371a7580.png" alt="image"></p><p>字母频率：e,t,a<br><img src="https://user-images.githubusercontent.com/10709657/59768187-7aa80880-92d6-11e9-9722-ee4ac8726134.png" alt="image"><br>重合指标注意下标是列优先<br><img src="https://user-images.githubusercontent.com/10709657/59768228-914e5f80-92d6-11e9-85a2-24ba5f6d85d7.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59768322-bcd14a00-92d6-11e9-96e0-3abfad2a023a.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59768437-f609ba00-92d6-11e9-8e0d-6ea313eccdfa.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59769162-269e2380-92d8-11e9-8040-9cd6d2d3f254.png" alt="image"><br>b 模 n 可逆 iff b 与 n 互质<br><img src="https://user-images.githubusercontent.com/10709657/59778631-733e2a80-92e9-11e9-9974-528cb3307fe6.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59778641-76d1b180-92e9-11e9-92e9-5bb3383e12b4.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59778736-9ec11500-92e9-11e9-90c9-f4f8a13bbe45.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59779905-ada8c700-92eb-11e9-9ac5-a82ecab4e9b5.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59781556-a2a36600-92ee-11e9-83cc-b4e1aa7cb583.png" alt="image"><br>𝑠𝑖 = (𝑣_𝑖 −1)^2 𝑚𝑜𝑑 𝑛<br><img src="https://user-images.githubusercontent.com/10709657/59781748-09288400-92ef-11e9-8197-701ce4772779.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59782440-87d1f100-92f0-11e9-9b90-1c070b532974.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59784408-e9945a00-92f4-11e9-945d-bce04a0ea7a5.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59784411-ec8f4a80-92f4-11e9-8bc5-bbd611c9490c.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59810284-11a4ad00-9337-11e9-9c92-009d8fc99073.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59814233-2426e280-9347-11e9-9185-2d56d2a93e1d.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;初等数论及其应用。。其实有点文科课了。。基本上在背公式。。证明题我是真的没证出来。。tktkddd 轻松秒了&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数论" scheme="https://ir1d.cf/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>js期末复习</title>
    <link href="https://ir1d.cf/2019/06/21/js%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>https://ir1d.cf/2019/06/21/js期末复习/</id>
    <published>2019-06-21T15:36:49.000Z</published>
    <updated>2019-06-21T15:43:37.189Z</updated>
    
    <content type="html"><![CDATA[<ul><li>[x] <a href="https://github.com/lydiahallie/javascript-questions" target="_blank" rel="noopener">https://github.com/lydiahallie/javascript-questions</a></li></ul><p>JS 好难，之前会的都是皮毛，复习了好多东西。。<br>考完：我复习的都是皮毛。。JS 太神仙了吧</p><a id="more"></a><p>js string immutable<br>toFixed, toPrecision 是四舍五入<br>传的都是引⽤</p><p>箭头函数表达式的语法比函数表达式更简洁，并且没有自己的 this，arguments，super 或 new.target。这些函数表达式更适用于那些本来需要匿名函数的地方，并且它们不能用作构造函数。</p><p><img src="https://user-images.githubusercontent.com/10709657/59082500-fa70c300-8925-11e9-87aa-14b114e7da08.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59082521-0eb4c000-8926-11e9-947a-654feed17732.png" alt="image"></p><p>字符串在声明后，其值就不会再发⽣变化（ immutable）<br>（任何操作都不会改变字符串的值）<br><img src="https://user-images.githubusercontent.com/10709657/59082200-94d00700-8924-11e9-866b-c6e7576ac9e1.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59082319-19228a00-8925-11e9-9d4f-5120f1c2b138.png" alt="image"><br>const 的指向不能变，但是指向的地方的值可以变<br>JS 传引用<br><img src="https://user-images.githubusercontent.com/10709657/59082343-3192a480-8925-11e9-9b12-6fb69f0f4be3.png" alt="image"><br><code>new Array</code> 参数只有一个的时候会被当做是数组里数的个数，而 <code>Array.of(2)</code> 是 <code>[2]</code>，仍为元素值<br><img src="https://user-images.githubusercontent.com/10709657/59082373-6141ac80-8925-11e9-9f9b-7d0c6e7cfd9f.png" alt="image"><br>push 尾，unshift 头；pop 尾，shift 头；pop 和 shift 都会返回被删除的元素<br><code>splice(start, deleteCount, …items)</code>， 如 <code>splice(1, 2, “cat”, “bat”, “pat”)</code><br><code>slice(start, end)</code> 也可用于获取数组的一部分<br>数组是 object，也可添加⾃定义的 property<br><code>.toFixed</code>，<code>.toPrecision</code> 都是四舍五入<br>sort 从小到大: <code>(v1, v2) =&gt; v1 - v2</code><br>函数的 property 可以相当于实现带记忆的函数</p><p>对⼀个 function object 使⽤ typeof 操作符<br>返回 “function”，⽽不是 “object”，但是 function 是 object，可以加 property<br>Symbol 只能作为 function 被调⽤ （也即，调⽤时前⾯不能加 new）<br><img src="https://user-images.githubusercontent.com/10709657/59083042-4886c600-8928-11e9-9f92-5b087c94ebc9.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59083053-5a686900-8928-11e9-977f-7e8b77c86209.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59083064-68b68500-8928-11e9-9d0d-92cb68a71237.png" alt="image"><br>Node.js： global；browser：window<br>若不加 use strict,变量在赋值后会注册成一个全局变量，加了之后不会<br><img src="https://user-images.githubusercontent.com/10709657/59084527-28f29c00-892e-11e9-94f3-0434757a0eef.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59084537-2f811380-892e-11e9-84ff-976b675ecb54.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59086787-598a0400-8935-11e9-89fe-a8c431caf839.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59086957-ec2aa300-8935-11e9-8917-d61bd972772e.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59087172-84c12300-8936-11e9-849a-7e1f4b0c05bd.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59087295-d79ada80-8936-11e9-863b-dac6faf309f6.png" alt="image"></p><p>arguments 总是忠实记录着函数调⽤时实际传⼊的参数<br><img src="https://user-images.githubusercontent.com/10709657/59088130-29dcfb00-8939-11e9-9f42-35ea1c4c7345.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59088902-6dd0ff80-893b-11e9-8846-5415f2ff968b.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59088919-76293a80-893b-11e9-9669-7c8248f25ff8.png" alt="image"></p><p><code>creature.say_hello.call(cat, 1, 2)</code> 等于 <code>creature.say_hello.apply(dog, [3, 4])</code><br><img src="https://user-images.githubusercontent.com/10709657/59089403-9efdff80-893c-11e9-8454-68fb7b63bd22.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59089417-a58c7700-893c-11e9-8dee-395763a82aa3.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59089361-842b8b00-893c-11e9-9365-17bceeda75bc.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59089696-5561e480-893d-11e9-8d8c-8385e3b636af.png" alt="image"></p><p>函数的 length：参数个数， <strong> 除了 有默认值的 和 rest </strong></p><p>bind 的 args 参数有点相当于是 python 里的 partial，传给函数的前几个参数了<br>main function 里的 <code>this: {}</code>, <code>new.target: undefined</code>, <code>arguments 看起来好像是 cli 的 arguments</code></p><p><img src="https://user-images.githubusercontent.com/10709657/59090054-40398580-893e-11e9-93d5-ccda5f5f0a85.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59090174-a1f9ef80-893e-11e9-903d-d408e9ebbe26.png" alt="image"><br>输出分别是 233 和 undefined。因为在箭头函数生成的时候 this 还没有<br>函数和闭包一一对应：包含 该函数本身、以及在此时可以访问到的所有变量</p><p>Object.getOwnPropertyNames obj.hasOwnProperty 不会去 obj 的原型链上查找<br>in 会顺着原型链找<br>Object.getOwnPropertyNames 找 string 类型的 key，<br>Object.getOwnPropertySymbols 找 symbol 类型</p><p>Object 的 property 的三种默认属性：writable: false, 但必须 use strict 才会不可写<br><img src="https://user-images.githubusercontent.com/10709657/59450076-033c2a00-8e3b-11e9-94ac-c6a10e896201.png" alt="image"><br>读取没有 getter 的 property 返回 undefined<br>在严格模式下 对⼀个没有 setter 的 property 赋值 会触发运⾏时错误<br><img src="https://user-images.githubusercontent.com/10709657/59451697-a2165580-8e3e-11e9-9672-87ee27328d70.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59451748-c2461480-8e3e-11e9-96bd-cb75f78155d6.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59451905-279a0580-8e3f-11e9-89f6-1f901bc9310a.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59451913-2d8fe680-8e3f-11e9-9446-6b1426c73e11.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59475218-f809ee00-8e7c-11e9-8825-31294ee7d2eb.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59475393-ca717480-8e7d-11e9-9156-b06980e5fbca.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59475410-ec6af700-8e7d-11e9-8013-b020c33621a5.png" alt="image"><br>for .. in 枚举的是 property （下标），for .. of 枚举的是值<br>for .. of 不改变原来值</p><p>原型链不得有环<br>⼀个通过字⾯量创建的 object 在缺省情况下，其原型链的⻓度是 2<br>⼀个通过字⾯量创建的 function 在缺省情况下，其原型链的⻓度是 3<br><strong>原型链 P358 TODO</strong></p><p><img src="https://user-images.githubusercontent.com/10709657/59476033-60f36500-8e81-11e9-823f-01ea5f8619ea.png" alt="image"><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names</a><br><img src="https://user-images.githubusercontent.com/10709657/59476527-ba5c9380-8e83-11e9-8303-954c3f270185.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59476554-db24e900-8e83-11e9-92e7-f24d7a924040.png" alt="image"></p><p>Object.assign(target, source);<br>Object.create(proto, [propertiesObject])<br><img src="https://user-images.githubusercontent.com/10709657/59655331-7b547800-91cc-11e9-8aa1-b250598bca78.png" alt="image"><br>OBject.seal 管的更多<br><img src="https://user-images.githubusercontent.com/10709657/59655942-988a4600-91ce-11e9-99c2-9005851b95c3.png" alt="image"><br>OBject.freeze 管的更更多<br><img src="https://user-images.githubusercontent.com/10709657/59656159-4dbcfe00-91cf-11e9-9e99-08096685fd8b.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59656190-5f9ea100-91cf-11e9-9b62-40751e30d889.png" alt="image"><br>用 Object.seal()密封的对象可以改变它们现有的属性。使用 Object.freeze() 冻结的对象中现有属性是不可变的。</p><p><code>Array</code><br>reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) =&gt; number):<br><img src="https://user-images.githubusercontent.com/10709657/59661434-6502e800-91dd-11e9-81b4-b61e05d9e4d5.png" alt="image"><br>Array.prototype.every/some 对于每个元素调用一个 callback 返回一个 bool，通过 every/some 来综合结果<br><img src="https://user-images.githubusercontent.com/10709657/59661540-9e3b5800-91dd-11e9-947b-790438757215.png" alt="image"></p><p>find：查找数组中满⾜给定条件的第⼀个元素<br>如果不存在满⾜给定条件的值，则返回 undefined</p><p><img src="https://user-images.githubusercontent.com/10709657/59661690-ea869800-91dd-11e9-9373-dc023a55187c.png" alt="image"><br><code>Map</code><br><img src="https://user-images.githubusercontent.com/10709657/59661755-1144ce80-91de-11e9-92d8-a92e9c8c8e06.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59662154-ec049000-91de-11e9-9e73-8fb0f9c8b1cd.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59662164-f0c94400-91de-11e9-989c-3af61fa829ec.png" alt="image"></p><p><code>Set</code></p><p>任何⼀个 iterable object 都可以构造成 Set<br><img src="https://user-images.githubusercontent.com/10709657/59662276-3128c200-91df-11e9-8b22-d3b354fe5bae.png" alt="image"></p><p>set 也可以 forEach，但是第三个参数貌似是他自己<br><img src="https://user-images.githubusercontent.com/10709657/59662904-78fc1900-91e0-11e9-8465-32bb4153c821.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59668545-46a3e900-91eb-11e9-9b52-84363be78dea.png" alt="image"><br>嵌套情况<br><img src="https://user-images.githubusercontent.com/10709657/59668964-fb3e0a80-91eb-11e9-837c-114737480530.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59669828-84097600-91ed-11e9-9d06-164bebf22442.png" alt="image"></p><p>rest 是一个数组</p><p><img src="https://user-images.githubusercontent.com/10709657/59670012-c3d05d80-91ed-11e9-8d55-7a8b0b40f8a1.png" alt="image"></p><p><code>【startIndex】</code> 这样之后是解构那个数组的值<br>函数参数里可以直接解构<br><img src="https://user-images.githubusercontent.com/10709657/59670300-4c4efe00-91ee-11e9-84b0-c6be2944a960.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59673346-b3bb7c80-91f3-11e9-9e42-410f5b99f27a.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59673352-b7e79a00-91f3-11e9-9ff3-c822acfc6f0e.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59673361-bcac4e00-91f3-11e9-994a-be1dc322ccca.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59673389-ce8df100-91f3-11e9-8eca-39763e157254.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59673620-30e6f180-91f4-11e9-99a5-0d5bd54c10ef.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59681965-c2ac2a00-9207-11e9-9c35-606d7691669a.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59681969-c63fb100-9207-11e9-9c7f-05e4539038da.png" alt="image"><br>⼀元操作符 +<br>会将操作数转化为 number 类型的值<br>比如 <code>(+c)</code></p><p>加法的隐式类型转换：<br>先 ToPrimitive，两侧有字符串的话会都转字符串，否则都转 number</p><p>类型转换这章好难。。</p><p><img src="https://user-images.githubusercontent.com/10709657/59683572-fd639180-920a-11e9-9ad2-e3d3236f96bf.png" alt="image"><br>可以自定义转换的方式<br>乘除、减法的话是转 number<br><img src="https://user-images.githubusercontent.com/10709657/59685024-ce9aea80-920d-11e9-827c-ed3155c3ffa2.png" alt="image"><br>left 会隐式转成 bool<br><img src="https://user-images.githubusercontent.com/10709657/59685061-e2dee780-920d-11e9-9a0e-d809550105ca.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59685110-00ac4c80-920e-11e9-9c95-1df2f425fa0a.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59685126-0a35b480-920e-11e9-901a-f378a5a52cb7.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59685146-1457b300-920e-11e9-9344-2875eaec2795.png" alt="image"></p><p><code>所有对象都是像是真的值</code><br>Two distinct objects are never equal for either strict or abstract comparisons.<br>An expression comparing Objects is only true if the operands reference the same Object<br><img src="https://user-images.githubusercontent.com/10709657/59692442-7ff24e00-9217-11e9-9646-d8b1551514d6.png" alt="image"></p><p>Object 的 <code>&lt;=</code> 应该是 ARC 了。。太难了我弃疗了<br>它比 <code>&lt;</code> 会多一个 <code>If r is true or undefined</code>，这个 true 应该就是 arc 比较出来的<br><a href="https://www.ecma-international.org/ecma-262/9.0/index.html#sec-relational-operators-runtime-semantics-evaluation" target="_blank" rel="noopener">https://www.ecma-international.org/ecma-262/9.0/index.html#sec-relational-operators-runtime-semantics-evaluation</a></p><p><img src="https://user-images.githubusercontent.com/10709657/59843833-f1eba400-938b-11e9-9744-ca4d2f1953a4.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59844634-fc0ea200-938d-11e9-8026-a73df0b5c9df.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59844708-21031500-938e-11e9-87ef-bf6077e9e79d.png" alt="image"></p><p>事件对象有⼀个 target 属性<br>其值：事件发⽣在的 HTML 元素<br>事件处理函数（当不是箭头函数时）的 this 参数<br>表示：当前的事件监听函数所附着在的 HTML 元素<br><img src="https://user-images.githubusercontent.com/10709657/59845256-86a3d100-938f-11e9-8017-6361c9860296.png" alt="image"><br>默认是监听冒泡阶段</p><h2 id="在⽗元素上监听⼦元素事件"><a href="#在⽗元素上监听⼦元素事件" class="headerlink" title="在⽗元素上监听⼦元素事件"></a>在⽗元素上监听⼦元素事件</h2><p><img src="https://user-images.githubusercontent.com/10709657/59845673-81935180-9390-11e9-8e4e-b87a8b029dde.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59845890-03837a80-9391-11e9-9983-a90d6b2a5368.png" alt="image"></p><p><img src="https://user-images.githubusercontent.com/10709657/59846812-6f66e280-9393-11e9-97b9-139f76f446cc.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59846822-742b9680-9393-11e9-92b7-f7b09cc9c53b.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59847460-1ac46700-9395-11e9-8e04-097011708988.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59847759-f9b04600-9395-11e9-9e23-7b523ef090f1.png" alt="image"><br>Generator 嵌套<br><img src="https://user-images.githubusercontent.com/10709657/59848150-08e3c380-9397-11e9-9092-29c0bffb267a.png" alt="image"><br>用 generator 实现 DFS<br><img src="https://user-images.githubusercontent.com/10709657/59848389-9aebcc00-9397-11e9-88cc-0625692e3937.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59848403-a212da00-9397-11e9-852c-c7fe7d021c48.png" alt="image"><br>generator 里 return 语句的不会在 for of 里遍历到，只有 yield 出来的会被取到<br>Array.from 的时候也是会忽视 return，尽管实际上这个值也会被放出来，需要手动去取<br><a href="https://stackoverflow.com/a/37202835/4597306" target="_blank" rel="noopener">https://stackoverflow.com/a/37202835/4597306</a><br><img src="https://user-images.githubusercontent.com/10709657/59853076-bc05ea00-93a2-11e9-9b61-1608eae29466.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59853089-c1fbcb00-93a2-11e9-9f91-df181bcefd42.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59853107-cde78d00-93a2-11e9-9e5b-0689b43f2e32.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59853130-d770f500-93a2-11e9-8f90-a2a738aeb54d.png" alt="image"><br>每⼀次在 promise 对象上调⽤ then 或 catch ⽅法<br>都会返回⼀个新的 promise 对象<br>可以在这个新对象上继续调⽤ then 或 catch ⽅法<br><img src="https://user-images.githubusercontent.com/10709657/59853292-2454cb80-93a3-11e9-8b4f-5f907ba434f2.png" alt="image"><br><img src="https://user-images.githubusercontent.com/10709657/59854405-726ace80-93a5-11e9-998f-ab294b6b734b.png" alt="image"><br>![image](<a href="https://user-images.githubusercontent.com/10709657/59854740-0f2d6c00-93a6-11e9-8e5a-7d6de74a" target="_blank" rel="noopener">https://user-images.githubusercontent.com/10709657/59854740-0f2d6c00-93a6-11e9-8e5a-7d6de74a</a><br>使用 var 关键字，你可以用相同的名称声明多个变量。然后变量将保存最新的值。</p><p>你不能使用 let 或 const 来实现这一点，因为它们是块作用域的。</p><p>所有对象的键（不包括 Symbol）在底层都是字符串，即使你自己没有将其作为字符串输入。</p><p>obj 如果你有两个名称相同的键，则键会被替换掉。它仍然位于第一个键出现的位置，但是值是最后出现那个键的值。</p><p>对象的键被自动转换为字符串<br>当字符串化一个对象时，它会变成 “[Object object]”<br><img src="https://user-images.githubusercontent.com/10709657/59862974-676c6a00-93b6-11e9-9012-8e7c1a159011.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;[x] &lt;a href=&quot;https://github.com/lydiahallie/javascript-questions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/lydiahallie/javascript-questions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JS 好难，之前会的都是皮毛，复习了好多东西。。&lt;br&gt;考完：我复习的都是皮毛。。JS 太神仙了吧&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JS" scheme="https://ir1d.cf/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>FastAI踩坑</title>
    <link href="https://ir1d.cf/2019/05/05/FastAI%E8%B8%A9%E5%9D%91/"/>
    <id>https://ir1d.cf/2019/05/05/FastAI踩坑/</id>
    <published>2019-05-04T16:09:24.000Z</published>
    <updated>2019-05-04T16:32:59.511Z</updated>
    
    <content type="html"><![CDATA[<ul><li>五一一直在调 Fast.AI</li></ul><a id="more"></a><p>训 SSD 的时候遇到了灵异事件，</p><p>遇到了个似乎问题差不多的老哥 <a href="https://stackoverflow.com/questions/48595240/map-decreasing-with-training-tensorflow-object-detection-ssd" target="_blank" rel="noopener">https://stackoverflow.com/questions/48595240/map-decreasing-with-training-tensorflow-object-detection-ssd</a> 但是我调了它说的这个参数，并没有什么效果。然后我发现同样的 model，用 pytorch 有这个问题，但是封进 fastai 的版本就没有这个毛病。</p><p>然后由于不满足与只 train 不 valid，然后加了 validation，然后就进入了 6h 一个 epoch 然后发现 valid 炸了的状态，后来发帖才知道可以 <code>learn.validate()</code> （然而这个函数对数据的 type 也有一些奇怪的隐含要求.. doc 写得不太清楚）</p><p>哦读入的时候也很坑，搞了好久那个 databunch，因为看它 doc 里写说什么如果用 pytorch 的 vanilla dataset，有些 fastai 的函数不滋兹（x然而后来也没用上）。用的那个 <code>ObjectItemList</code>，然后它 <code>get_label_from_func</code> 之后竟然会把 bounding box 的坐标给 norm 成 [-1,1] 之间的.. 然后我转成 [0..1] 的时候又翻车了一万次.. 因为我之前搞成一个 list 就可以，但是 fastai 它不爽，要用个 <code>bb_pad_collate</code> 给封成一个 torch tensor= =</p><p>其实 doc 里有写.. 但我总是之后才找到..</p><p>然后有个坑是那个 ImageBBox 的坐标默认顺序是 <code>(top, left, bottom, right)</code>，和我之前的也不一样= =，然后就翻车了.. 倒也没炸掉，只是 loss 奇高，but really time consuming</p><p>现在能顺利 run 起来了，除了偶尔它莫名其妙 out of memory （也可能是服务器上别的 process 搞得，说不好）以外没啥毛病（#flag）</p><p>这几天在 forum 开了一万个帖子.. 感觉自己太 push 了（（</p><p>可是 fastai 的文档看着是真的不舒服.. 习惯了 pytorch 那种简明扼要 example 充足的..</p><p>fastai 的东西封装得很细，但是不会用就只能炸炸炸..</p><p>惨惨 QAQ</p><p>我记得好像还没有用 FastAI 写 Object Detection 的指南，如果有空可以整理一下 code（</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;五一一直在调 Fast.AI&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Fast.AI" scheme="https://ir1d.cf/tags/Fast-AI/"/>
    
      <category term="pytorch" scheme="https://ir1d.cf/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>groupsNotes-0424</title>
    <link href="https://ir1d.cf/2019/04/24/groupsNotes-0424/"/>
    <id>https://ir1d.cf/2019/04/24/groupsNotes-0424/</id>
    <published>2019-04-24T11:51:56.000Z</published>
    <updated>2019-04-24T16:31:40.245Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ul><li><a href="https://arxiv.org/pdf/1904.04971.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1904.04971.pdf</a> <ul><li>Soft Conditional Computation</li><li>这个挺有意思的，感觉最近这种dynamic network的工作很多</li></ul></li><li>cv里梯度一般是 1e-3 - 1e-8<ul><li>很少task用adam</li><li>大部分就momentum</li><li>一些生成模型用adam，还有一些pipeline较长的用</li><li>比如image classification呢 ? sgd</li><li>Detection,segmentation 都 sgd加momentum</li><li>Adam 泛化差</li><li>adam在gradient sparse时有很大优势，所以很多nlp task常用 （在同一次梯度反向传播的时候很多参数梯度很小或者都是0？）</li><li>噢噢，要是有空我讲讲Bengio的一篇文章，关于unsupervised pre-train影响的</li><li>对任意模型架构，通过P(X)去无监督学任意层的初始化表达</li><li><a href="http://www.jmlr.org/papers/volume11/erhan10a/erhan10a.pdf" target="_blank" rel="noopener">http://www.jmlr.org/papers/volume11/erhan10a/erhan10a.pdf</a></li><li>Unsupervised Feature Learning via Non-Parametric Instance Discrimination</li></ul></li><li><a href="http://openaccess.thecvf.com/content_cvpr_2018/CameraReady/0801.pdf" target="_blank" rel="noopener">http://openaccess.thecvf.com/content_cvpr_2018/CameraReady/0801.pdf</a><ul><li>去年cvpr的一篇文章，idea挺简单也挺有意思的。通过instance-wise discrimination学到的feature做classification。</li></ul></li><li><a href="https://arxiv.org/pdf/1904.10281.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1904.10281.pdf</a></li><li><p><strong>Dynamic network</strong></p><ul><li><strong>weight prediction</strong></li><li>training loss 可以降，但是泛化效果没有 gain</li></ul></li><li><p>A series of paper from sensetime</p><ul><li><a href="https://arxiv.org/abs/1904.09739" target="_blank" rel="noopener">https://arxiv.org/abs/1904.09739</a></li><li>Switchable Whitening for Deep Representation Learning</li><li><a href="https://arxiv.org/abs/1807.09441" target="_blank" rel="noopener">https://arxiv.org/abs/1807.09441</a></li><li>Two at Once: Enhancing Learning and Generalization Capacities via IBN-Net</li><li><a href="https://arxiv.org/abs/1806.10779" target="_blank" rel="noopener">https://arxiv.org/abs/1806.10779</a></li><li>Differentiable Learning-to-Normalize via Switchable Normalization</li><li><a href="https://arxiv.org/abs/1609.09106" target="_blank" rel="noopener">https://arxiv.org/abs/1609.09106</a></li></ul></li><li><p>HyperNetworks</p><ul><li>Our main result is that hypernetworks can generate non-shared weights for LSTM and achieve near state-of-the-art results on a variety of sequence modelling tasks</li></ul></li><li><p>FaceNet: A Unified Embedding for Face Recognition and Clustering</p><ul><li><a href="https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Schroff_FaceNet_A_Unified_2015_CVPR_paper.pdf" target="_blank" rel="noopener">https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Schroff_FaceNet_A_Unified_2015_CVPR_paper.pdf</a></li></ul></li><li>Unsupervised Feature Learning via Non-Parametric Instance Discrimination<ul><li><a href="http://openaccess.thecvf.com/content_cvpr_2018/papers/Wu_Unsupervised_Feature_Learning_CVPR_2018_paper.pdf" target="_blank" rel="noopener">http://openaccess.thecvf.com/content_cvpr_2018/papers/Wu_Unsupervised_Feature_Learning_CVPR_2018_paper.pdf</a></li></ul></li><li>A Bottom-up Clustering Approach to Unsupervised Person Re-identification<ul><li><a href="http://xuanyidong.com/pdf/AAAI19-vana.pdf" target="_blank" rel="noopener">http://xuanyidong.com/pdf/AAAI19-vana.pdf</a></li></ul></li><li>Learning Deep Embeddings with Histogram Loss<ul><li><a href="http://papers.nips.cc/paper/6463-learning-deep-embeddings-with-histogram-loss" target="_blank" rel="noopener">http://papers.nips.cc/paper/6463-learning-deep-embeddings-with-histogram-loss</a></li></ul></li></ul><p>我觉得我今晚完全掉线了.. 急需好好补习一下..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1904.04971.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://arxiv.org/pdf/1904.04971.pd
      
    
    </summary>
    
      <category term="paperReading" scheme="https://ir1d.cf/categories/paperReading/"/>
    
    
      <category term="paperReading" scheme="https://ir1d.cf/tags/paperReading/"/>
    
  </entry>
  
  <entry>
    <title>代组期中笔记</title>
    <link href="https://ir1d.cf/2019/04/24/%E4%BB%A3%E7%BB%84%E6%9C%9F%E4%B8%AD%E7%AC%94%E8%AE%B0/"/>
    <id>https://ir1d.cf/2019/04/24/代组期中笔记/</id>
    <published>2019-04-24T07:53:22.000Z</published>
    <updated>2019-04-24T08:02:23.761Z</updated>
    
    <content type="html"><![CDATA[<p>本来以为会特别硬核.. 一直在抢救证明题.. 结果最后一堆算实例.. gggg</p><p>在群同态基本定理上建立的知识体系.. 却想不清楚它本身是怎么证明的了.. QAQ</p><p>熬夜抢救考试之后突击测 12 分钟跑简直要了命了.. 这么个阴天也能晒伤我真是服了= =</p><a id="more"></a><p>Ir1d XD+, [21.04.19 22:36]<br>子群判定定理<br>子群格</p><p>Ir1d XD+, [22.04.19 14:44]<br>同态的表示形式<br>群同态定理</p><p>Ir1d XD+, [22.04.19 20:24]<br>置换之积 从右向左</p><p><img src="https://i.loli.net/2019/04/24/5cc0165ec623a.png" alt="20190424155509.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016626b4d2.png" alt="20190424155513.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc01666c4f40.png" alt="20190424155517.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc0166a51296.png" alt="20190424155521.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc0166f9c76a.png" alt="20190424155525.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc01682210af.png" alt="20190424155544.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016865d6f6.png" alt="20190424155549.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc01689cc3f6.png" alt="20190424155552.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc0168d3af9b.png" alt="20190424155556.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016927f18e.png" alt="20190424155559.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016951fc90.png" alt="20190424155604.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016989fbe3.png" alt="20190424155607.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc0169b9a5bc.png" alt="20190424155610.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc0169f7caed.png" alt="20190424155613.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016a42b2b5.png" alt="20190424155618.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016a7a1c18.png" alt="20190424155621.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016abc53fd.png" alt="20190424155626.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016af2b3d9.png" alt="20190424155629.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016b2d4eb9.png" alt="20190424155633.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016dd8294b.png" alt="20190424155715.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016ba9b73f.png" alt="20190424155641.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016e599a0c.png" alt="20190424155724.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016e913680.png" alt="20190424155727.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016ec7f110.png" alt="20190424155731.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc016f6cdd72.png" alt="20190424155741.png"></p><p>于是期中就考完了吧.. 冷静分析一下其实这学期一直在翘课，期中复习得也很仓促.. 中间病得很厉害.. 然后是不是还有 challenge 翻车需要背锅.. 就很僵硬.. 下半学期也好不到哪里去吧.. 一万个大作业.. 三个 kaggle.. 然后还有 4 个 pre.. 一篇综述.. 希望期末可以认认真真地认认真真..</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来以为会特别硬核.. 一直在抢救证明题.. 结果最后一堆算实例.. gggg&lt;/p&gt;
&lt;p&gt;在群同态基本定理上建立的知识体系.. 却想不清楚它本身是怎么证明的了.. QAQ&lt;/p&gt;
&lt;p&gt;熬夜抢救考试之后突击测 12 分钟跑简直要了命了.. 这么个阴天也能晒伤我真是服了= =&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="代数结构" scheme="https://ir1d.cf/tags/%E4%BB%A3%E6%95%B0%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>概统期中笔记</title>
    <link href="https://ir1d.cf/2019/04/24/%E6%A6%82%E7%BB%9F%E6%9C%9F%E4%B8%AD%E7%AC%94%E8%AE%B0/"/>
    <id>https://ir1d.cf/2019/04/24/概统期中笔记/</id>
    <published>2019-04-24T07:48:40.000Z</published>
    <updated>2019-04-24T07:53:04.382Z</updated>
    
    <content type="html"><![CDATA[<p>我发现上回整理了这个 post 的模板之后根本就没写过 post.. gg</p><p>概统这波.. 讲道理没什么难度的.. 是我送了</p><a id="more"></a><p><img src="https://i.loli.net/2019/04/24/5cc0152fa8789.png" alt="20190424155005.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc0154722af5.png" alt="20190424155029.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc0154e5352e.png" alt="20190424155037.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc01553b4472.png" alt="20190424155042.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc0155a035d9.png" alt="20190424155048.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc0156b0dd4b.png" alt="20190424155106.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc01570610a6.png" alt="20190424155111.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc01576523c5.png" alt="20190424155117.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc0157cb663e.png" alt="20190424155123.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc015810c873.png" alt="20190424155127.png"></p><p><img src="https://i.loli.net/2019/04/24/5cc01587600cb.png" alt="20190424155134.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我发现上回整理了这个 post 的模板之后根本就没写过 post.. gg&lt;/p&gt;
&lt;p&gt;概统这波.. 讲道理没什么难度的.. 是我送了&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="概率统计" scheme="https://ir1d.cf/tags/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>groupsNotes-0417</title>
    <link href="https://ir1d.cf/2019/04/17/groupsNotes-0417/"/>
    <id>https://ir1d.cf/2019/04/17/groupsNotes-0417/</id>
    <published>2019-04-17T08:37:25.000Z</published>
    <updated>2019-04-24T11:39:23.607Z</updated>
    
    <content type="html"><![CDATA[<ul><li>记录一下 Very very good Paper Reading Group 的讨论</li></ul><a id="more"></a><ul><li><a href="https://blog.csdn.net/haolexiao/article/details/65157026" target="_blank" rel="noopener">https://blog.csdn.net/haolexiao/article/details/65157026</a> 一种从离散概率分布里高效采样的方法 如果概率分布是固定的话，可以替换 np.random.choice</li><li>fastai 好香</li><li>OctConv<ul><li>这个也挺有意思的，把conv的channel分成高频和低频两个部分</li><li>低频的channel部分 feature map的size是 1/4</li><li>motivation是图像可以分成高低频两部分</li><li>可以看一下去年的一个dual cnn：两个branch处理图片，一个高频一个低频 </li><li>可能是因为，同计算量️下，有效计算量大了</li><li>Image to image translation 主要在image generation上用的多</li></ul></li><li><a href="https://arxiv.org/pdf/1904.06690.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1904.06690.pdf</a><ul><li>scc: 试过用bert做推荐的，那时候跑出来结果和transformer是一样的</li></ul></li><li>neural nearst neighboor <a href="https://arxiv.org/pdf/1810.12575.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1810.12575.pdf</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;记录一下 Very very good Paper Reading Group 的讨论&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="paperReading" scheme="https://ir1d.cf/categories/paperReading/"/>
    
    
      <category term="paperReading" scheme="https://ir1d.cf/tags/paperReading/"/>
    
  </entry>
  
  <entry>
    <title>Precision-Recall 曲线</title>
    <link href="https://ir1d.cf/2019/02/27/Precision-Recall-%E6%9B%B2%E7%BA%BF/"/>
    <id>https://ir1d.cf/2019/02/27/Precision-Recall-曲线/</id>
    <published>2019-02-27T10:39:14.000Z</published>
    <updated>2019-04-24T08:08:01.704Z</updated>
    
    <content type="html"><![CDATA[<ul><li>绘制 Precision-Recall 曲线过程中的一些思考</li></ul><a id="more"></a><p>也不能说是思考吧… 菜爆了好吗…</p><p>现象是我在画一个 object detection 的算法的 pr 曲线,画出来之后发现他好像 recall ~ 0 的时候, precision 不到 1…然而一般在网上看到的那种 pr 曲线是过 (recall=0, precision=1) 这个点的…</p><p>这里面怎么回事呢?</p><p>思考 pr 曲线是怎么测的?</p><p>我们枚举一个 confidence 的 thresh, 就得到很多 (precision, recall) 的数对.</p><p>这个 confidence 什么时候接近 y 轴呢?换言之,什么时候 recall 很小呢?</p><p>一个例子是我预测的就很少,自然 recall 也小.</p><p>为什么 precision 一般是 1 呢? 因为预测少的时候 confidence 是枚举到了很大的位置,这时的预测基本上都是准的..</p><p>那我测的这个为什么不是 1 呢? 它 confidence 最高的那个 box 就是错的, 而因为我枚举的 thresh 是每次增 0.001,所以 0.999 这一档并不都是准的…</p><h2 id="upd"><a href="#upd" class="headerlink" title="upd"></a>upd</h2><p>读这个的时候意识到好像哪里不太对 <a href="https://github.com/Cartucho/mAP/blob/master/main.py#L489" target="_blank" rel="noopener">https://github.com/Cartucho/mAP/blob/master/main.py#L489</a></p><p>简而言之实际上不需要 confidence 是 0/1 之间的，我们只需要对 confidence 排个序就好了。</p><p>思考这个枚举 confidence 的过程，是一个我们逐渐考虑更多的 bounding box 样本的过程.. 所以和我们排个序之后从上到下逐渐处理更多的样本是本质一样的过程.. 所以搞个前缀和就好了= =</p><p>还是挺 make sense 的，可惜我想了这么长时间。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;绘制 Precision-Recall 曲线过程中的一些思考&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="precision-recall" scheme="https://ir1d.cf/tags/precision-recall/"/>
    
  </entry>
  
  <entry>
    <title>Photoshop 脚本 again</title>
    <link href="https://ir1d.cf/2019/02/27/Photoshop-%E8%84%9A%E6%9C%AC-again/"/>
    <id>https://ir1d.cf/2019/02/27/Photoshop-脚本-again/</id>
    <published>2019-02-27T10:36:26.000Z</published>
    <updated>2019-02-27T10:47:07.588Z</updated>
    
    <content type="html"><![CDATA[<ul><li>搞了个脚本来把 arw 转成 png</li></ul><a id="more"></a><p>本来用 mogrify 然后 xargs 一下跑满 8 核超爽,然后突然发现这个好像 ubuntu 上面读 arw (RAW图片) 的那个工具读出来尺寸不对… 本来是 6000x4000 的图,它给读成 6024x4024,转了几天的都白转了…</p><p>于是开动 Photoshop</p><p>本来录了个动作,然后批处理一波</p><p>没想到这个批处理跑上几个小时之后自己就停了…</p><p>心态崩了,于是把上回的脚本拿来改改</p><p>(to be released)</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;搞了个脚本来把 arw 转成 png&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="photoshop" scheme="https://ir1d.cf/tags/photoshop/"/>
    
  </entry>
  
  <entry>
    <title>Single Shot MultiBox Detector 笔记</title>
    <link href="https://ir1d.cf/2019/02/15/Single-Shot-MultiBox-Detector-%E7%AC%94%E8%AE%B0/"/>
    <id>https://ir1d.cf/2019/02/15/Single-Shot-MultiBox-Detector-笔记/</id>
    <published>2019-02-15T04:10:06.000Z</published>
    <updated>2019-02-15T04:10:56.623Z</updated>
    
    <content type="html"><![CDATA[<ul><li>SSD - Single Shot MultiBox Detector</li></ul><a id="more"></a><h2 id="主要解决什么问题"><a href="#主要解决什么问题" class="headerlink" title="主要解决什么问题"></a>主要解决什么问题</h2><p>解决 bounding box proposal 太慢的问题，作者表示我们可以干掉这一阶段，同时准确性也差不多好</p><h2 id="解决的思路"><a href="#解决的思路" class="headerlink" title="解决的思路"></a>解决的思路</h2><h2 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a>核心知识点</h2><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><h2 id="改进（？）"><a href="#改进（？）" class="headerlink" title="改进（？）"></a>改进（？）</h2><h2 id="other-comment"><a href="#other-comment" class="headerlink" title="other comment"></a>other comment</h2>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;SSD - Single Shot MultiBox Detector&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="paperReading" scheme="https://ir1d.cf/tags/paperReading/"/>
    
  </entry>
  
  <entry>
    <title>Faster RCNN</title>
    <link href="https://ir1d.cf/2019/02/14/Faster-RCNN/"/>
    <id>https://ir1d.cf/2019/02/14/Faster-RCNN/</id>
    <published>2019-02-14T13:58:34.000Z</published>
    <updated>2019-02-14T16:32:24.743Z</updated>
    
    <content type="html"><![CDATA[<ul><li>来记一下 Faster RCNN 吧…… 免得没看多少又忘光了</li></ul><a id="more"></a><h2 id="主要解决什么问题"><a href="#主要解决什么问题" class="headerlink" title="主要解决什么问题"></a>主要解决什么问题</h2><p>目标检测之前都在用 selective search，实在是太慢了。</p><h2 id="解决的思路"><a href="#解决的思路" class="headerlink" title="解决的思路"></a>解决的思路</h2><p>这篇工作搞了个 Region Proposal Network，把生成 proposal 的工作交给 GPU，可以加速</p><p><img src="https://i.loli.net/2019/02/14/5c6574ea53f7b.png" alt="20190214220216.png"></p><p>无处不在的 Attention……</p><h2 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a>核心知识点</h2><h3 id="RPN"><a href="#RPN" class="headerlink" title="RPN"></a>RPN</h3><p><img src="https://i.loli.net/2019/02/14/5c6585693b966.png" alt="20190214231238.png"></p><p>用一个 3x3 的滑动窗口去处理 feature，然后把它送进一个 box-regression 和一个 box-classification 网络（都是全连接的）。<br>cls 和 reg 网络实际上用的是 1x1 卷积。</p><p>在滑动的过程中，每一点上，造九个 box 出来（3种大小 x 3种尺寸）。</p><p>不能训练左右的 anchor，否则由于负样本过多可能模型对正样本不是那么敏感。</p><p>新的层用标准差为 0.01 的高斯分布初始化，之前的其它层用 imagenet 上的分类网络 pretrain</p><h3 id="训练方式"><a href="#训练方式" class="headerlink" title="训练方式"></a>训练方式</h3><p>想要共享 RPN 和 Fast RCNN 之间的 feature</p><p>Alternating：先 RPN，再用 proposal 去训练 Fast RCNN。得到的网络再去初始化 RPN。迭代地来</p><p>Approximate Joint：一起训练，每一轮 SGD 里，先得到proposal，然后假装它是固定的，来训练 Fast RCNN。</p><p>作者表示这种做法忽视了 RPN 网络生成的bounding box 的坐标的梯度（后面直接用了，梯度没有传播），因此只是近似的方法</p><p>Non-Approximate Joint：</p><p>需要一个 <code>RoI warping</code> 层来解决上面梯度的问题。。感觉意思是搞了个梯度不会丢失的 ROI pooling 层？</p><p>4-Step Alternating：</p><ol><li>先训 RPN（用 ImageNet 上 pretrain的 model，在一个 region proposal task 上面 fine-tune）</li><li>用 Fast RCNN 训练一个独立的 detection 网络（利用上一步得到的 proposal）。注：这个也是 ImageNet pretrain，这一步之后两个网络还没有共享卷积层。</li><li>用 detector network 来初始化 RPN 的训练，但是固定住共享的卷积层的权重，只 fine-tune RPN 中独立的层。（现在这两个网络有共享的卷积层了。</li><li>最后继续固定那几个层的权重，fine-tune 只在 Fast-RCNN 里的层。</li></ol><h3 id="nms"><a href="#nms" class="headerlink" title="nms"></a>nms</h3><p>non-maximum suppression，用来消灭重复的 porposal regions（根据 cls 分数来评定）。paper 里写的 IoU threshold 竟然是 0.7……</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><h2 id="改进（？）"><a href="#改进（？）" class="headerlink" title="改进（？）"></a>改进（？）</h2><h2 id="other-comment"><a href="#other-comment" class="headerlink" title="other comment"></a>other comment</h2><p><a href="http://closure11.com/rcnn-fast-rcnn-faster-rcnn%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/" target="_blank" rel="noopener">http://closure11.com/rcnn-fast-rcnn-faster-rcnn%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;来记一下 Faster RCNN 吧…… 免得没看多少又忘光了&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="paperReading" scheme="https://ir1d.cf/tags/paperReading/"/>
    
  </entry>
  
  <entry>
    <title>Face Detection Demo 评测</title>
    <link href="https://ir1d.cf/2019/02/11/Face-Detection-Demo-%E8%AF%84%E6%B5%8B/"/>
    <id>https://ir1d.cf/2019/02/11/Face-Detection-Demo-评测/</id>
    <published>2019-02-11T13:00:24.000Z</published>
    <updated>2019-02-11T15:51:07.811Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Face Detection 代码测试</li></ul><a id="more"></a><p>总体来说其实 doc 都蛮清楚，搞了这么久其实还是自己基本功不够扎实</p><p>Google 真好用.webp</p><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p><a href="https://github.com/mahyarnajibi/SSH" target="_blank" rel="noopener">https://github.com/mahyarnajibi/SSH</a></p><p>编译 <code>caffe-ssh</code> 之后要把 <code>caffe-ssh/python</code> 塞进 <code>PYTHONPATH</code>，方法是 <code>echo $PYTHONPATH=xxx</code></p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p><a href="https://github.com/sciencefans/RSA-for-object-detection" target="_blank" rel="noopener">https://github.com/sciencefans/RSA-for-object-detection</a></p><p>需要 matlab。</p><p>跑的时候可能需要自己 <code>addpath</code>，一个是加那个 <code>caffemex</code> 下面的 <code>matlab</code> 文件夹（类似上面的 pycaffe），另一个是要加 <code>predict/utils/bin</code> 这个目录，因为底下有 <code>nms_mex</code> 这个东西……</p><p><code>caffemex</code> 编译的时候如果 <code>make test</code> 如果报错是正常的，好像是因为魔改版的 caffe 加了新层没有加上配套的测试用例</p><h2 id="face-py-faster-rcnn"><a href="#face-py-faster-rcnn" class="headerlink" title="face-py-faster-rcnn"></a>face-py-faster-rcnn</h2><p>这个比 Detectron 要扎心得多……</p><p><a href="https://github.com/playerkk/face-py-faster-rcnn" target="_blank" rel="noopener">https://github.com/playerkk/face-py-faster-rcnn</a></p><p>他那个远古的 caffe-faster-rcnn 有问题，搜索一波得知使用 <code>merge -X theirs</code> 这种方式把新的 caffe 合进来就行（caffe 那个仓库就行，不是非得要 pytorch 里的那个）</p><p>它 README 拉到最下面才是那个 face 上面训的 model，不然前面那堆 model 其实都是直接在 wider 上面训的（印象中）</p><p>然后那个 <code>tools/demo.py</code> 里面找 model 的时候可能有些不尽人意，用的时候就写死成本机绝对路径就好了</p><h2 id="HR-ER"><a href="#HR-ER" class="headerlink" title="HR_ER"></a>HR_ER</h2><p>需要 matlab 环境</p><p><a href="https://github.com/peiyunh/tiny" target="_blank" rel="noopener">https://github.com/peiyunh/tiny</a></p><p>编译 matconvnet 的时候请务必指定 cudaRoot 和 cudnnRoot，否则可能看起来很正常然而 <code>CUDNN_STATUS_BAD_PARAM</code> 或者 <img src="https://i.loli.net/2019/02/11/5c618449c3b2e.png" alt="20190211221848.png"></p><p>其实应该这样的啦<br><img src="https://i.loli.net/2019/02/11/5c61845b33874.png" alt="20190211221907.png"></p><p>后面都海星，注意那个 <code>cd utils</code> 是指的是 tiny 下面的那个 utils = =</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Face Detection 代码测试&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="paperReading" scheme="https://ir1d.cf/tags/paperReading/"/>
    
  </entry>
  
  <entry>
    <title>OI Wiki 相关的技能点</title>
    <link href="https://ir1d.cf/2019/02/09/OI-Wiki-%E7%9B%B8%E5%85%B3%E7%9A%84%E6%8A%80%E8%83%BD%E7%82%B9/"/>
    <id>https://ir1d.cf/2019/02/09/OI-Wiki-相关的技能点/</id>
    <published>2019-02-09T06:43:08.000Z</published>
    <updated>2019-04-24T08:09:48.446Z</updated>
    
    <content type="html"><![CDATA[<ul><li>记录下吧，免得吹逼的时候忘记了（×</li></ul><a id="more"></a><ol><li>python-markdown + mkdocs 的方案（当时还不知道有 vuepress）</li><li>找到 remarkjs 来做 lint，而且搞了几个自用的插件，似乎和 pymdownx 还算是兼容</li><li>魔改 gitment，后换用 gitalk</li><li>大量修改 mkdocs-material 的主题（React）</li><li>搭建 elasticsearch 替换原有搜索（比 Algolia Docsearch 不知道高到哪里去了）</li><li>nginx 配置 brotil，gzip，用 acme.sh 签证书，配置 patch、一系列优化</li><li>用 mathjax-node 配置服务器端渲染 mathjax （mathjax-ssr 雾）</li><li>配置 gulp 来压缩构建产物等一系列操作（感谢 @Margatroid 大佬 carry）</li><li>配置 instantClick（感谢 @frank 大佬 carry）</li></ol><pre><del>10. 这玩意肯定能凑出来十条的</del></pre><ol><li>搞了个 lintbot，自动对 pr 做 lint</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;记录下吧，免得吹逼的时候忘记了（×&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="oiwiki" scheme="https://ir1d.cf/tags/oiwiki/"/>
    
  </entry>
  
  <entry>
    <title>mkdocs 配置 Elasticsearch</title>
    <link href="https://ir1d.cf/2019/01/23/mkdocs-%E9%85%8D%E7%BD%AE-Elasticsearch/"/>
    <id>https://ir1d.cf/2019/01/23/mkdocs-配置-Elasticsearch/</id>
    <published>2019-01-23T13:40:16.000Z</published>
    <updated>2019-01-24T06:38:29.997Z</updated>
    
    <content type="html"><![CDATA[<ul><li>mkdocs 配置 Elasticsearch</li></ul><a id="more"></a><p>按照 <a href="https://imququ.com/post/elasticsearch.html" target="_blank" rel="noopener">https://imququ.com/post/elasticsearch.html</a></p><p>除了 elasticsearch.yml 里不需要再配置 analyzer，现在新版本是在建 index 的时候放到 setting 字段里 <a href="https://github.com/elastic/elasticsearch/issues/2630" target="_blank" rel="noopener">https://github.com/elastic/elasticsearch/issues/2630</a></p><p>分词插件在 <a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>ubuntu 上面按照官网的来直接 apt 装，比 docker 还方便（雾）</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>用 express 封装了一下搜索和查询结果（main.js）</p><p>关于 cors，还是被坑了一下，在 oi-wiki.org 搜的时候，存到了 cache 里，再用别的域名搜的时候，就会被 cors 给拦住。需要加上 <code>add_header &#39;Vary&#39; &quot;Origin&quot;;</code>，来告诉 client side 这个 cors 的域名可能会有多种情况。</p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>主要改的 <code>assets/javascripts/components/Material/Search/Result.jsx</code>，因为不想每打一个字就发一个请求，就给 delay 了一下，参见 <a href="https://github.com/Ir1d/mkdocs-material/tree/es" target="_blank" rel="noopener">https://github.com/Ir1d/mkdocs-material/tree/es</a></p><h2 id="es-配置"><a href="#es-配置" class="headerlink" title="es 配置"></a>es 配置</h2><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>（init.js）</p><p><code>client.bulk</code> 是个好东西</p><h3 id="搭配-github-webhook"><a href="#搭配-github-webhook" class="headerlink" title="搭配 github webhook"></a>搭配 github webhook</h3><p>用的是 <code>modified</code> 和 <code>remoed</code> 字段，过程和导入类似。</p><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p>分别是 <code>h1</code>, <code>h2</code>, <code>content</code>（全文）, <code>url</code>（方便前端直接调，其实写在 express 也行，当时没考虑那么多）</p><p>由于全文之前是 markdown 文档，这里是用 <code>strip-markdown-math</code> 给 markdown 格式删一删（不过还剩了很多空行没删掉= =），由于 <code>strip-markdown</code> 不删掉数学公式（<code>remark-math</code> 是外部插件），所以我就封装（fork）了下。</p><p>相关代码：<a href="https://gist.github.com/Ir1d/eb1cc5d749be93238f3a4118156e5b5b" target="_blank" rel="noopener">https://gist.github.com/Ir1d/eb1cc5d749be93238f3a4118156e5b5b</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;mkdocs 配置 Elasticsearch&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="mkdocs" scheme="https://ir1d.cf/tags/mkdocs/"/>
    
      <category term="Elasticsearch" scheme="https://ir1d.cf/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Photoshop 脚本</title>
    <link href="https://ir1d.cf/2019/01/10/Photoshop-%E8%84%9A%E6%9C%AC/"/>
    <id>https://ir1d.cf/2019/01/10/Photoshop-脚本/</id>
    <published>2019-01-10T15:07:06.000Z</published>
    <updated>2019-01-10T15:12:21.849Z</updated>
    
    <content type="html"><![CDATA[<ul><li>11 月末写了个 ps 脚本来整理图片…… 一直没来得及记录</li></ul><a id="more"></a><p>需求是给每组图片对齐，拍的时候误差不是很大，对齐就用自动对齐就行。可惜图片数量太多，大概 4k 张，一组 5-7 张，手动来怕是要难受死。</p><p>用 ps 来操作的话，大概就是打开文件到图层，对齐，然后导出各图层至文件。开始的时候还试用现成的那个导入文件到堆栈，可惜和后面的操作接不上= = 不过那个导出图片的还是好用的 XD</p><p>对齐之后遇到了个问题，会对齐出来白边，然而我需要从这组图中找到一个尽量大的有色矩形。。。折腾了好久也没弄明白，最后搜到刚好前几天有人发布了一个解决方案。爽爆：<a href="https://developer71240.github.io/crop-to-opaque/" target="_blank" rel="noopener">https://developer71240.github.io/crop-to-opaque/</a></p><p>（不过人家禁止再分发，所以我的 gist 里面删掉了那部分，把人家的那段粘进 crop 函数就好啦）</p><p>Gist：<a href="https://gist.github.com/Ir1d/14af313f15d3fc91b23e70897daa2ca4" target="_blank" rel="noopener">https://gist.github.com/Ir1d/14af313f15d3fc91b23e70897daa2ca4</a></p><p>总体来说 Ps 的脚本体验及其糟糕…… 文档奇差，不过海星吧，印象中它是扩展了某种 jsx，然后直接去看那种 jsx 的 api 就星。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;11 月末写了个 ps 脚本来整理图片…… 一直没来得及记录&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Photoshop" scheme="https://ir1d.cf/tags/Photoshop/"/>
    
      <category term="jsx" scheme="https://ir1d.cf/tags/jsx/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 笔记</title>
    <link href="https://ir1d.cf/2018/12/09/LeetCode-%E7%AC%94%E8%AE%B0/"/>
    <id>https://ir1d.cf/2018/12/09/LeetCode-笔记/</id>
    <published>2018-12-09T06:00:55.000Z</published>
    <updated>2018-12-09T10:46:23.130Z</updated>
    
    <content type="html"><![CDATA[<ul><li>LeetCode 笔记</li></ul><p>工具用的是 leetcode-cli，可惜这货在网站上登录之后本地 cli 存的 session 就掉了，又得重新登录</p><a id="more"></a><ul><li>342</li></ul><p>判断一个数是不是 4 的幂次。我们知道 2 的幂次的话是：<code>x &amp;&amp; (x &amp; (x - 1)) == 0</code>，4 的话只需要额外看一下二进制表示里所有的 1 都在最高位就行。</p><ul><li>405</li></ul><p>十进制转十六进制，想到可以 sprintf 一波，最简单</p><ul><li>665</li></ul><p>最长上升子序列：lower_bound<br>最长不下降子序列：upper_bound</p><ul><li>594</li></ul><p>求一个最长的子序列，使得它的最大值和最小值的差恰好为 1。</p><p>注意是子序列，所以就找相邻的两个数的出现次数之和的最大值咯</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;LeetCode 笔记&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工具用的是 leetcode-cli，可惜这货在网站上登录之后本地 cli 存的 session 就掉了，又得重新登录&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="LeetCode" scheme="https://ir1d.cf/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>CF950F Treeland Tour</title>
    <link href="https://ir1d.cf/2018/12/07/CF950F-Treeland-Tour/"/>
    <id>https://ir1d.cf/2018/12/07/CF950F-Treeland-Tour/</id>
    <published>2018-12-07T11:53:03.000Z</published>
    <updated>2019-04-24T08:09:31.854Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一个点有权值的无根树，求一个链，使得这个链上的点权的 lis 长度最大</li></ul><a id="more"></a><p>说起来是我打的第一次 cf 吧……</p><p>很科学的做法：</p><p><a href="https://www.cnblogs.com/cxhscst2/p/7219887.html" target="_blank" rel="noopener">https://www.cnblogs.com/cxhscst2/p/7219887.html</a></p><p>通过一次 dfs 把它转换成从子树向上合并答案的过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;一个点有权值的无根树，求一个链，使得这个链上的点权的 lis 长度最大&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="codeforces" scheme="https://ir1d.cf/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2002</title>
    <link href="https://ir1d.cf/2018/12/07/POJ-2002/"/>
    <id>https://ir1d.cf/2018/12/07/POJ-2002/</id>
    <published>2018-12-07T10:15:40.000Z</published>
    <updated>2018-12-07T10:16:55.776Z</updated>
    
    <content type="html"><![CDATA[<ul><li>POJ 2002</li></ul><a id="more"></a><p>平面上一堆点，数能组成多少个正方形</p><p>枚举一条边（而不是枚举对角线</p><p>现在有了坐标怎么判断是否是正方形呢？</p><p>先看 4 边长相等，再看两个对角线相等。</p><p>数算这题写了好久。。好难过</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;POJ 2002&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="POJ" scheme="https://ir1d.cf/tags/POJ/"/>
    
  </entry>
  
</feed>
