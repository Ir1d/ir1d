<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neverland</title>
  
  <subtitle>你是我不愿醒来的梦啊&lt;br&gt;真是柔情一场</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ir1d.cf/"/>
  <updated>2018-10-05T08:28:26.619Z</updated>
  <id>https://ir1d.cf/</id>
  
  <author>
    <name>Ir1d</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Minecraft 1.13 挂机钓鱼脚本</title>
    <link href="https://ir1d.cf/2018/10/05/Minecraft-1-13-%E6%8C%82%E6%9C%BA%E9%92%93%E9%B1%BC%E8%84%9A%E6%9C%AC/"/>
    <id>https://ir1d.cf/2018/10/05/Minecraft-1-13-挂机钓鱼脚本/</id>
    <published>2018-10-05T08:17:27.000Z</published>
    <updated>2018-10-05T08:28:26.619Z</updated>
    
    <content type="html"><![CDATA[<p>Minecraft 1.13 挂机钓鱼</p><p>（Ubuntu</p><a id="more"></a><p>启动器是 HMCL：<a href="https://github.com/huanghongxun/HMCL/" target="_blank" rel="noopener">https://github.com/huanghongxun/HMCL/</a></p><p>本文记录的操作来自：<a href="https://www.reddit.com/r/Minecraft/comments/6fb6cp/using_an_afk_fish_farm_in_the_background_with/" target="_blank" rel="noopener">https://www.reddit.com/r/Minecraft/comments/6fb6cp/using_an_afk_fish_farm_in_the_background_with/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xwininfo -display :0</span><br><span class="line"><span class="comment"># 查看窗口的十六进制 id，然后改到下一个命令中去</span></span><br><span class="line">xdotool mousedown --window [MINECRAFT_WINDOW_ID] 3</span><br></pre></td></tr></table></figure><p>安装直接 <code>sudo apt install xdotool</code> 就好了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Minecraft 1.13 挂机钓鱼&lt;/p&gt;
&lt;p&gt;（Ubuntu&lt;/p&gt;
    
    </summary>
    
      <category term="操作" scheme="https://ir1d.cf/categories/%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="Minecraft" scheme="https://ir1d.cf/tags/Minecraft/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-cli</title>
    <link href="https://ir1d.cf/2018/10/02/leetcode-cli/"/>
    <id>https://ir1d.cf/2018/10/02/leetcode-cli/</id>
    <published>2018-10-02T06:54:39.000Z</published>
    <updated>2018-10-02T06:56:29.190Z</updated>
    
    <content type="html"><![CDATA[<ul><li>LeetCode-cli</li></ul><a id="more"></a><p>一直想写一个 cli 工具来简化提交到 OJ 的过程= =</p><p>鸽了多年的 TerminalOJ 终于可以瞑目了吧……</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g leetcode-cli</span><br></pre></td></tr></table></figure><p><a href="https://skygragon.github.io/leetcode-cli/commands" target="_blank" rel="noopener">https://skygragon.github.io/leetcode-cli/commands</a></p><p>功能也蛮强大的说实话，要是能自带 alias 就好了 XD</p><p>我现在加上这两个，更方便一些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> Leetcode=<span class="string">'leetcode'</span></span><br><span class="line"><span class="built_in">alias</span> Another=<span class="string">'leetcode show -q eDL -t algorithms -gxe'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;LeetCode-cli&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="操作" scheme="https://ir1d.cf/categories/%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="leetcode" scheme="https://ir1d.cf/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>数算MOOC 3.4 思考题</title>
    <link href="https://ir1d.cf/2018/10/01/%E6%95%B0%E7%AE%97MOOC-3-4-%E6%80%9D%E8%80%83%E9%A2%98/"/>
    <id>https://ir1d.cf/2018/10/01/数算MOOC-3-4-思考题/</id>
    <published>2018-10-01T01:52:07.000Z</published>
    <updated>2018-10-01T01:58:36.962Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ul><li>只用 front, rear 两个变量，长度为 n 的队列，最多能容纳多少个元素？</li></ul><p>最多容纳 n-1 个元素。一个最多元素个数为 n-1 的队列，它有 n 个状态，需要用 front 和 rear 的距离来表示这种状态，所以需要一个空位置。</p><ul><li>如果不愿意浪费队列的存储单元，还可以怎么办？</li></ul><p>可以把这个存储单元拿出来，单独开一个变量表示队列元素个数或者表示队列是否为空。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;只用 front, rear 两个变量，长度为 n 的队列，最多能容纳多少个元素？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最多容纳 n-1 个元素。一个最多元素个数为 n-1 的队列，它有 n 个状态，需要用 front 和 rear 
      
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数算" scheme="https://ir1d.cf/tags/%E6%95%B0%E7%AE%97/"/>
    
      <category term="MOOC" scheme="https://ir1d.cf/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>为什么 pop() 返回值是 void</title>
    <link href="https://ir1d.cf/2018/09/30/%E4%B8%BA%E4%BB%80%E4%B9%88-pop-%E8%BF%94%E5%9B%9E%E5%80%BC%E6%98%AF-void/"/>
    <id>https://ir1d.cf/2018/09/30/为什么-pop-返回值是-void/</id>
    <published>2018-09-30T15:54:31.000Z</published>
    <updated>2018-09-30T17:08:05.374Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ref: <a href="http://cpptruths.blogspot.com/2005/10/why-does-stdstackpop-returns-void.html" target="_blank" rel="noopener">http://cpptruths.blogspot.com/2005/10/why-does-stdstackpop-returns-void.html</a></li></ul><a id="more"></a><p>数算 MOOC 的思考题：STL 为什么把 pop 和 top 分开？</p><ol><li>pop 如果有返回值的话，显然不能返回一个引用。如果是值的话，就不是很高效了——它会产生至少一次多余的构造函数调用。</li><li>如果 <code>std::stack&lt;T&gt;</code> 是一个模板类， pop 返回的结果需要调用复制构造函数。如果这个构造函数内部足够复杂，甚至出发了异常，那么这里面的 pop 的返回值就是一个 rvalue…… 在过程中就丢失了…… 并没有办法找回</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;ref: &lt;a href=&quot;http://cpptruths.blogspot.com/2005/10/why-does-stdstackpop-returns-void.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://cpptruths.blogspot.com/2005/10/why-does-stdstackpop-returns-void.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="c++" scheme="https://ir1d.cf/tags/c/"/>
    
      <category term="pop" scheme="https://ir1d.cf/tags/pop/"/>
    
      <category term="void" scheme="https://ir1d.cf/tags/void/"/>
    
  </entry>
  
  <entry>
    <title>ics datalab 小结</title>
    <link href="https://ir1d.cf/2018/09/30/ics-datalab-%E5%B0%8F%E7%BB%93/"/>
    <id>https://ir1d.cf/2018/09/30/ics-datalab-小结/</id>
    <published>2018-09-30T04:37:27.000Z</published>
    <updated>2018-09-30T05:07:09.244Z</updated>
    
    <content type="html"><![CDATA[<ul><li>datalab</li></ul><a id="more"></a><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ul><li><a href="http://aggregate.org/MAGIC/" target="_blank" rel="noopener">http://aggregate.org/MAGIC/</a></li><li><a href="https://graphics.stanford.edu/~seander/bithacks.html" target="_blank" rel="noopener">https://graphics.stanford.edu/~seander/bithacks.html</a></li><li><a href="https://github.com/lmichalek/CodeSamples/blob/master/bit-manipulation/bits.c" target="_blank" rel="noopener">https://github.com/lmichalek/CodeSamples/blob/master/bit-manipulation/bits.c</a></li><li><a href="https://github.com/mrseaman/15213-datalab/blob/master/bits.c" target="_blank" rel="noopener">https://github.com/mrseaman/15213-datalab/blob/master/bits.c</a></li><li><a href="http://hackersdelight.org" target="_blank" rel="noopener">http://hackersdelight.org</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;datalab&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ics" scheme="https://ir1d.cf/tags/ics/"/>
    
      <category term="datalab" scheme="https://ir1d.cf/tags/datalab/"/>
    
  </entry>
  
  <entry>
    <title>给canvas截图并保存</title>
    <link href="https://ir1d.cf/2018/09/30/%E7%BB%99canvas%E6%88%AA%E5%9B%BE%E5%B9%B6%E4%BF%9D%E5%AD%98/"/>
    <id>https://ir1d.cf/2018/09/30/给canvas截图并保存/</id>
    <published>2018-09-30T04:13:45.000Z</published>
    <updated>2018-09-30T04:37:12.260Z</updated>
    
    <content type="html"><![CDATA[<p>需求是把网页给截图并保存下来，搜了下有两个 js，一个是 html2canvas，另一个是 canvas2image。</p><p>刚开始用 canvas2image，遇到一堆问题，最后还是换了 html2canvas。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'canvas'</span>)[<span class="number">0</span>];</span><br><span class="line">  html2canvas(<span class="built_in">document</span>.body, &#123;</span><br><span class="line">    width: <span class="number">720</span>,</span><br><span class="line">    height: <span class="number">480</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"???"</span>)</span><br><span class="line">      <span class="keyword">var</span> image = canvas.toDataURL(<span class="string">"image/png"</span>).replace(<span class="string">"image/png"</span>, <span class="string">"image/octet-stream"</span>);  <span class="comment">// here is the most important part because if you dont replace you will get a DOM 18 exception.</span></span><br><span class="line">      <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">      a.href = image;</span><br><span class="line">      a.download = <span class="string">'860_rain.png'</span>;</span><br><span class="line">      a.click();</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line"><span class="comment">// Canvas2Image.saveAsPNG(canvasObj, 720, 480);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而貌似打开图片之后是缩放了的…… 这个 <code>720x480</code> 其实是把原图裁了一部分……</p><p>还没搞清楚怎么让它不缩放我的图片……</p><p>貌似不能用 js 来 resize 一个 canvas，似乎只能在加载图片的时候就这么搞。</p><p>然后还顺便发现一个神奇的事情，如果不停地下载同一个文件名的文件…… 它至多能下 100 次。就是会有 download, download (1), 一直到 download (100)。然后就下不下来了……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需求是把网页给截图并保存下来，搜了下有两个 js，一个是 html2canvas，另一个是 canvas2image。&lt;/p&gt;
&lt;p&gt;刚开始用 canvas2image，遇到一堆问题，最后还是换了 html2canvas。&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="操作" scheme="https://ir1d.cf/categories/%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="canvas" scheme="https://ir1d.cf/tags/canvas/"/>
    
      <category term="html2canvas" scheme="https://ir1d.cf/tags/html2canvas/"/>
    
  </entry>
  
  <entry>
    <title>DailyNotes 18/9/20</title>
    <link href="https://ir1d.cf/2018/09/20/DailyNotes-18-9-20/"/>
    <id>https://ir1d.cf/2018/09/20/DailyNotes-18-9-20/</id>
    <published>2018-09-20T15:45:20.000Z</published>
    <updated>2018-09-20T16:26:28.049Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ics 小班课 XD</li></ul><a id="more"></a><p>余数的符号和被除数一样</p><p>负数右移和除法结果不一样</p><p><code>-1 &gt;&gt; 3 == -1</code></p><p>ssh-tunnel: <a href="https://cherrot.com/tech/2017/01/08/ssh-tunneling-practice.html" target="_blank" rel="noopener">https://cherrot.com/tech/2017/01/08/ssh-tunneling-practice.html</a></p><p>把一个数转换成二进制：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;16&gt; y(<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; y;</span><br></pre></td></tr></table></figure><p><code>(x|-x) &gt;&gt; 31</code> 除了在 0 那里，其他地方都是 -1</p><p><code>-2147483648</code> 满足 <code>x=-x</code></p><p><code>nan</code> 不满足 <code>x=x</code></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;ics 小班课 XD&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="DailyNotes" scheme="https://ir1d.cf/tags/DailyNotes/"/>
    
  </entry>
  
  <entry>
    <title>算导并查集笔记</title>
    <link href="https://ir1d.cf/2018/09/18/%E7%AE%97%E5%AF%BC%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%AC%94%E8%AE%B0/"/>
    <id>https://ir1d.cf/2018/09/18/算导并查集笔记/</id>
    <published>2018-09-18T08:33:00.000Z</published>
    <updated>2018-09-18T13:41:44.846Z</updated>
    
    <content type="html"><![CDATA[<ul><li>算法导论并查集部分笔记</li></ul><p>CLRS 上面称它为“用于不相交集合的数据结构”。（第 21 章）</p><a id="more"></a><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>我们要找一个 disjoint-set data structure 维护一个不相交动态集的集合。每个集合有一个代表元。在很多应用中，我们不关心哪个成员被用来代表，只关心动态集合的代表不应当在动态集合没有修改的时候发生变化。</p><p>当然，这个代表元并非随便选取，可能有时会有某种规则（比如选取最小的元素）</p><p>我们希望支持以下三中操作：</p><p><code>MAKE-SET(x)</code>：建立一个新的集合。<br><code>UNION(x, y)</code>：合并包含 x 和 y 的两个动态集合。<br><code>FIND-SET(x)</code>：返回一个指针，指向包含 x 的集合的代表。</p><p>不难发现，这样的数据结构可以用来快速维护一个无向图的连通分量。</p><h2 id="链表表示"><a href="#链表表示" class="headerlink" title="链表表示"></a>链表表示</h2><p>每个集合的对象包含 head 属性和 tail 属性， head 属性指向表的第一个对象， tail 属性指向最后一个对象。链表中的每个对象都包含一个集合成员。</p><p>在这种表示法中，UNION 操作的耗时最多，对于每个对象，我们必须更新指向集合对象的指针，这与所在链表长度呈线性关系。</p><p>事实上，一个 UNION 操作的摊还时间为 $\Theta(n)$</p><p><strong>加权合并启发式策略</strong>：如果两个集合都有 $\Omega(n)$ 个成员，则单个的 UNION 操作仍需要 $\Omega(n)$ 时间。而一个具有 m 个操作（三种一共）的操作序列，使用启发式合并，需要的时间为 $O(m + nlogn)$。</p><p>由于每个 UNION 操作合并两个不相交集，因此至多执行 $n-1$ 次 UNION 操作。我们知道对于任意的 $k \leq n$，在 x 的指针被更新 $\lceil logk \rceil$ 次之后，结果集合一定至少有 k 个成员。因为最大集合至多包含 n 个成员，故每个对象的指针在所有的 UNION 操作中最多被更新 $\lceil logn \rceil$ 次。因此在所有的 UNION 操作中被更新的对象的指针总数为 $O(nlogn)$。</p><h2 id="不相交集合森林"><a href="#不相交集合森林" class="headerlink" title="不相交集合森林"></a>不相交集合森林</h2><p>考虑更快的实现。我们用有根树来表示集合，树中每个结点包含一个成员，每棵树代表一个集合，在一个不相交集合森林中，每个成员仅指向父结点。每棵树的根包含集合的代表，且其为自己的父结点。<br>在之前的实现中，一个包含 $n-1$ 个 UNION 操作的序列可以构造出一个恰好有 n 个结点的线性链的树。我们需要使用下面两个 trick 来得到一个渐进最优的不相交集合数据结构。<br>这两种做法都是能改进运行时间的启发式策略。</p><h3 id="按秩合并"><a href="#按秩合并" class="headerlink" title="按秩合并"></a>按秩合并</h3><p>类似上面链表中的加权合并启发式策略，每次使具有较少结点的树的根指向具有较多节点的树的根。算导中表示并不需要显式地记录每个结点为根的子树的大小，而是采用一种“易于分析”的方法。对于每个结点，维护一个<strong>秩</strong>，它表示该结点高度的一个上界。在使用按秩合并的时候，我们让具有较小秩的根指向具有较大秩的根。</p><h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3><p>在 FIND-SET 的时候，让查找路径的每个结点直接指向根。路径压缩并不改变任何结点的秩。</p><h3 id="启发式策略对运行时间的影响"><a href="#启发式策略对运行时间的影响" class="headerlink" title="启发式策略对运行时间的影响"></a>启发式策略对运行时间的影响</h3><p>如果单独使用按秩合并或者路径压缩，他们每一个都能改善不相交集合森林上操作的运行时间。<br>单独按秩合并：$O(mlogn)$，且上界是紧的。<br>单独路径压缩：$\Omega(n+f \times (1+log_{2+f/n}n))$<br>然而只有<strong>一起使用</strong>的时候最坏情况运行时间为 $O(m\alpha(n))$，这里 $\alpha(n)$ 是阿克曼函数的反函数。</p><h2 id="按秩合并-路径压缩的分析"><a href="#按秩合并-路径压缩的分析" class="headerlink" title="按秩合并+路径压缩的分析"></a>按秩合并+路径压缩的分析</h2><p>证明太硬核了…… 我要跳过它</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><h3 id="脱机最小值"><a href="#脱机最小值" class="headerlink" title="脱机最小值"></a>脱机最小值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OFF-LINE-MINIMUM(m, n)</span><br><span class="line">    for i = 1 to n</span><br><span class="line">        determine j such that i in K[j]</span><br><span class="line">        if j != m + 1</span><br><span class="line">            extracted[j] = i</span><br><span class="line">            let l be the smallest value greater than j for which set K[l] exists</span><br><span class="line">            K[l] = K[j] ∪ K[l], destroying K[j]</span><br><span class="line">    return extracted</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;算法导论并查集部分笔记&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CLRS 上面称它为“用于不相交集合的数据结构”。（第 21 章）&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="算法导论" scheme="https://ir1d.cf/tags/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
      <category term="并查集" scheme="https://ir1d.cf/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>DailyNotes 18/9/17</title>
    <link href="https://ir1d.cf/2018/09/17/DailyNotes-18-9-17/"/>
    <id>https://ir1d.cf/2018/09/17/DailyNotes-18-9-17/</id>
    <published>2018-09-17T15:21:57.000Z</published>
    <updated>2018-09-18T10:54:56.311Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ics</li><li>数算实习</li></ul><a id="more"></a><p>今日体验了 ics…… 感觉看日程表即将炸裂 QAQ</p><p>数算实习讲了一节课并查集…… 惊了它竟然在算导上单独占一章</p><hr><p>nan 平方 $\geq 0$</p><p>ics 课上讨论是不是浮点数平方大于等于 0 一直成立……</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">1</span>/<span class="number">0.</span>;</span><br><span class="line"><span class="keyword">if</span> (x * x &gt;= <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"= ="</span>);</span><br></pre></td></tr></table></figure><hr><p>平均复杂度 &amp; 平摊</p><p>说一下我的理解<br>前者是指输入满足某种概率分布，然后考虑输入的平均情况进行分析。<br>后者应该是把总代价平均到一个周期内来承担。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;ics&lt;/li&gt;
&lt;li&gt;数算实习&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="DailyNotes" scheme="https://ir1d.cf/tags/DailyNotes/"/>
    
  </entry>
  
  <entry>
    <title>DailyNotes 18/9/15</title>
    <link href="https://ir1d.cf/2018/09/15/DailyNotes-18-9-15/"/>
    <id>https://ir1d.cf/2018/09/15/DailyNotes-18-9-15/</id>
    <published>2018-09-15T03:13:11.000Z</published>
    <updated>2018-09-15T16:12:39.936Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Transpose-Matrix"><a href="#Transpose-Matrix" class="headerlink" title="Transpose Matrix"></a>Transpose Matrix</h2><p>把一个矩阵转置</p><p>掌握了二维数组 reserve 的姿势</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res(A[<span class="number">0</span>].size(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(A.size()));</span><br></pre></td></tr></table></figure><p>输入一个指针一定要各种判是不是空的，比如给你的 root = =</p><h2 id="好像-cv2-resize-和-scipy-imresize-不一样啊？？"><a href="#好像-cv2-resize-和-scipy-imresize-不一样啊？？" class="headerlink" title="好像 cv2.resize 和 scipy.imresize 不一样啊？？"></a>好像 cv2.resize 和 scipy.imresize 不一样啊？？</h2><p>看 EDSR 的 issue 区里面有人说有 artifact，然后作者说你是不是没用 bicubic。人家说我用的啊，最后发现把 cv2 的换成 scipy 就好了…… 好神奇哎</p><p><a href="https://stackoverflow.com/questions/26823140/imresize-trying-to-understand-the-bicubic-interpolation/26823261#26823261" target="_blank" rel="noopener">https://stackoverflow.com/questions/26823140/imresize-trying-to-understand-the-bicubic-interpolation/26823261#26823261</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Transpose-Matrix&quot;&gt;&lt;a href=&quot;#Transpose-Matrix&quot; class=&quot;headerlink&quot; title=&quot;Transpose Matrix&quot;&gt;&lt;/a&gt;Transpose Matrix&lt;/h2
      
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="paperReading" scheme="https://ir1d.cf/tags/paperReading/"/>
    
  </entry>
  
  <entry>
    <title>Dailynotes 18/9/14</title>
    <link href="https://ir1d.cf/2018/09/14/Dailynotes-18-9-14/"/>
    <id>https://ir1d.cf/2018/09/14/Dailynotes-18-9-14/</id>
    <published>2018-09-14T12:14:29.000Z</published>
    <updated>2018-09-14T17:50:21.687Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>Zero-shot learning 指的是我们之前没有这个类别的训练样本。但是我们可以学习到一个映射X-&gt;Y。如果这个映射足够好的话，我们就可以处理没有看到的类了。</p><p>One-shot learning 指的是我们在训练样本很少，甚至只有一个的情况下，依旧能做预测。<br>如何做到呢？可以在一个大数据集上学到general knowledge（具体的说，也可以是X-&gt;Y的映射），然后再到小数据上有技巧的update</p><p>颓废终日。。。</p><p>no gain this week….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h2&gt;&lt;p&gt;Zero-shot learning 指的是我们之前没有这个类别的训练样本。但是我们可以
      
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="paperReading" scheme="https://ir1d.cf/tags/paperReading/"/>
    
  </entry>
  
  <entry>
    <title>DailyNotes 9.10</title>
    <link href="https://ir1d.cf/2018/09/10/DailyNotes-9-10/"/>
    <id>https://ir1d.cf/2018/09/10/DailyNotes-9-10/</id>
    <published>2018-09-10T14:22:48.000Z</published>
    <updated>2018-09-10T18:33:59.986Z</updated>
    
    <content type="html"><![CDATA[<p>其实今天没有读什么文章，不过昨天配了 reddit 的订阅，感觉很厉害。</p><p>用上 hexoeditor 以及 hexo new 学会加引号之后，感觉操作上顺畅了很多。</p><a id="more"></a><h2 id="Are-result-images-in-research-papers-on-GANs-and-image-attribution-hand-picked-or-random"><a href="#Are-result-images-in-research-papers-on-GANs-and-image-attribution-hand-picked-or-random" class="headerlink" title="Are result images in research papers on GANs and image attribution hand-picked or random"></a>Are result images in research papers on GANs and image attribution hand-picked or random</h2><p>很有趣的一个问题，文章中的效果图是随机的吗，还是精心挑选的？</p><p>显然这是挑出来的吧（<br>肯定要选效果最好的啊<br>甚至还有这样的评论</p><blockquote><p>In a presentation by Goodfellow he says that he copy pasted the original images as the gan quality wasnt very good.</p></blockquote><p>“我没有撒谎，我只是没有说出全部真相”<br>感觉大家都是在挑对自己有利的事实来说话……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实今天没有读什么文章，不过昨天配了 reddit 的订阅，感觉很厉害。&lt;/p&gt;
&lt;p&gt;用上 hexoeditor 以及 hexo new 学会加引号之后，感觉操作上顺畅了很多。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="paperReading" scheme="https://ir1d.cf/tags/paperReading/"/>
    
  </entry>
  
  <entry>
    <title>summer2018 总结</title>
    <link href="https://ir1d.cf/2018/09/10/summer2018-%E6%80%BB%E7%BB%93/"/>
    <id>https://ir1d.cf/2018/09/10/summer2018-总结/</id>
    <published>2018-09-10T08:08:11.000Z</published>
    <updated>2018-09-10T16:19:30.248Z</updated>
    
    <content type="html"><![CDATA[<ul><li>summer2018</li></ul><a id="more"></a><p>为什么今天来写呢…… 因为今天自作主张给自己放了一天假，整理一下XD</p><p>期末考之后自信满满，觉得肯定成绩特别好，然而后来发现完全翻车，比上学期还惨烈。<br>对于这种事情我觉得还是完全是自己的原因，比如期中的时候就说期末一定要考这块内容，然后期末的时候忙着忙着就忘记了…… 然而期中的时候我这块没有错，期末的时候记混了然后就翻车了。<br>期中的时候就有遇到细节上翻车，期末的时候又因为哪里少了什么什么结果扣了一堆分……<br>完全是在造孽啊，你想大一干了这么多事情，有什么可以写进 cv 的？最后不还是 GPA 写了进去= =</p><p>运气好的是，刘老师收留了我，虽然感觉自己可能很快就被自己劝退了，但是感觉接触到这个崭新的世界也是一件蛮有意思的事情呢（啧，感觉自己最近很喜欢说“一件蛮有意思的事情呢”）。<br>这个夏天主要在学一些很基础的事情，开始写周报，读了一些论文，python 水平有了很大提升，也认识到了一些局限，不过也认识到了很 nice 的新朋友们，也有了一些希望。万分感激！</p><p>后来去搞 OI Wiki，也下了很大功夫，最大的决心来自于程设考试前立了个 flag，说考完试我肯定要把这些东西好好总结总结…… 然后考完试就忘记了…… 有天夜里突然想起来，到 ExOJ 群里问了下 “你们觉得怎样”，然后趁机拉了个群。开始的时候其实完全是自己在写，后来跟高中的几个小伙伴交流了一下，得到了一些支持，再后来松给了我一份资料Qrz…… 然后就很努力地在宣传，非常感谢各方朋友们的支持，遇到了一些志同道合的小伙伴，感觉还是很有希望的呢。<br>关于 2016-2018，在 footer 里这么写，是因为用了一些 2016 年的和褚老板郑老板一起搞的那个项目里的东西啦～<br>至于为什么想要做这个 wiki，那就说来话长暂且不表……<br>这个暑假搞这个项目让我明白了很多人和很多事，感觉如果没有这段经历，可能不会有这么多思考吧 XD<br>折腾的过程中也涨了很多姿势，虽然不知道以后能不能用得上，但是还是蛮有成就感的呢</p><p>开学之后瀚哥就不留在北京了，不知何时才能再相见…… 十分感激这段时间的帮助，感谢对我的种种 naive 的包容，这段经历对我改变很大，谢谢！<br>woc hexo 竟然不需要空行就能分段…… 学到了</p><p>军训…… 太扎心了，暂且不表。三院的大夫也非常 nice，他不和你说治不好了，他说是终身疾病…………</p><p>下学期课一定要好好学习…… 别去搞什么乱七八糟的了。很久以前就看过“时间规划是王道”，然而还是把自己搞得一团糟。写个人陈述的时候找到了很有趣的一段话，“I will prioritize my interests”，感觉是这样……</p><p>要好好的</p><p>昨天起八听说 shaonv 去了头条，<br>我们都有光明的未来，<br>嗯</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;summer2018&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Github Bot 踩坑</title>
    <link href="https://ir1d.cf/2018/09/10/Github-Bot-%E8%B8%A9%E5%9D%91/"/>
    <id>https://ir1d.cf/2018/09/10/Github-Bot-踩坑/</id>
    <published>2018-09-10T07:22:01.000Z</published>
    <updated>2018-09-10T08:07:57.585Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/24OI/linter" target="_blank" rel="noopener">https://github.com/24OI/linter</a></li></ul><a id="more"></a><p>主要在搞如何跑一个自动格式化 markdown 代码的 bot，尝试了 probot，直接 octokit，最后发现实在是还不如自己写个 .sh 来搞= =</p><p>是这样的，probot 的问题是 app 安装在主仓库里，权限限制在主仓库里，如果想要给 pr 里面 push 更新，就需要 fork 里面也安装了这个 app，然而这个体验实在是太糟糕了……</p><p>至于 octokit，实际上 probot 调用的也是这个接口，就想要不直接用它？然而发现它的 api 是调用的 updateFile，一直报错。得知这东西会对每个修改的文件建一个 commit，感觉即使调出来了也是要爆炸= =</p><p>干脆直接上 .sh 来搞这个 lint 的过程好了，octokit 仅用来操作 webhook。</p><p>介绍一下一些坑吧…… 开始写这种总结发现搞到最后其实很难记得都遇到过哪些问题，真的佩服那些把教程写得清清楚楚的大佬们</p><p>nodejs 的 exec 如果运行一个 .sh 的话，它的环境变量是空的，source 或者指定 uid 好像都不好用，要手动声明一下才行。</p><p>抄 travis 的 log 学到了高超的 git 技巧，可惜后来没用上。</p><p>哦还有 probot 需要那个 installation_id，如果直接 redeliver payload 可能会爆出各种错。 </p><p>slack 里面维护者回复很及时…… 真的厉害。后来还看到原来 probot 在 gsoc 里面…… QAQ</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/24OI/linter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/24OI/linter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="操作" scheme="https://ir1d.cf/categories/%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="Github" scheme="https://ir1d.cf/tags/Github/"/>
    
      <category term="probot" scheme="https://ir1d.cf/tags/probot/"/>
    
      <category term="Node.js" scheme="https://ir1d.cf/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>mathjax-node-踩坑</title>
    <link href="https://ir1d.cf/2018/09/05/mathjax-node-%E8%B8%A9%E5%9D%91/"/>
    <id>https://ir1d.cf/2018/09/05/mathjax-node-踩坑/</id>
    <published>2018-09-05T02:47:34.000Z</published>
    <updated>2018-09-05T12:22:45.173Z</updated>
    
    <content type="html"><![CDATA[<p>配置 mathjax-node</p><a id="more"></a><p>motivation 是发现 OI Wiki 上面有的页面现在就已经有大量公式了…… 本机就能渲染上 3-4s，感觉日后再堆公式进去可能吃不消。</p><p>然后就研究了下 mathjax-node，发现这玩意需要手动分析 DOM 把 mathjax 部分取出来喂给它……</p><p>于是鸽了好久，直到有一天在 mathjax-node 的 README 最底下看到了个 mathjax-node-page，发现这个已经封装好了，直接把 html 丢给它就可以啦。</p><p>跑了下发现情况不妙…… preview 没有关掉，导致现在会双倍公式，试了下没啥好方法，于是用 regex 给搞掉了（写法参考 OI Wiki 的仓库）</p><p>然后就遇到了个问题：中文的字体用的 monospace，会重叠起来。开了个 issue 人家表示因为是 server-side 确定字的大小，你需要自己调这玩意= =</p><p><a href="https://github.com/mathjax/MathJax-node/issues/424" target="_blank" rel="noopener">https://github.com/mathjax/MathJax-node/issues/424</a></p><p>然后听说 monospace 在 win 上面有可能 fall-back 成宋体= =</p><p>hmmmmm 我觉得其实还可以接受啊？</p><p>upd: 好像可以浏览器端自己设置，那就这样吧，不管了</p><p>upd: 啧，发现公式不能自己断行，手机上显示效果很不好（其实不是断行，原版的话公式比较长会溢出。。现在的会把公式缩小= =</p><p>以及发现 netlify 真的是个好东西…… 之前找了很久忘记在哪看到的，后来发现果然是 RSSHub 里面= =</p><p>server-side render 本机跑很久然而放到 travis 和 netlify 上面好像还没超时（</p><p>hmmmmm 看了下 netlify 上跑一次需要 3min 我觉得海星？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配置 mathjax-node&lt;/p&gt;
    
    </summary>
    
      <category term="操作" scheme="https://ir1d.cf/categories/%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="mathjax-node" scheme="https://ir1d.cf/tags/mathjax-node/"/>
    
  </entry>
  
  <entry>
    <title>Rain Streak Removal for Single Image via Kernel Guided CNN</title>
    <link href="https://ir1d.cf/2018/09/03/Rain-Streak-Removal-for-Single-Image-via-Kernel-Guided-CNN/"/>
    <id>https://ir1d.cf/2018/09/03/Rain-Streak-Removal-for-Single-Image-via-Kernel-Guided-CNN/</id>
    <published>2018-09-03T04:38:31.000Z</published>
    <updated>2018-09-03T14:53:34.627Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Rain Streak Removal for Single Image via Kernel Guided CNN</li></ul><a id="more"></a><h2 id="Rain-Streak-Removal-for-Single-Image-via-Kernel-Guided-CNN"><a href="#Rain-Streak-Removal-for-Single-Image-via-Kernel-Guided-CNN" class="headerlink" title="Rain Streak Removal for Single Image via Kernel Guided CNN"></a>Rain Streak Removal for Single Image via Kernel Guided CNN</h2><p>motivation 是已有方法不能很好地处理 line-pattern texture 和 rain streak。</p><p>本文中作者表示既然雨线是因为 motion blur 和 scattering 产生的，不妨把雨线导致的降质看作是 motion blur。然后这里假设，对于一个小 image patch 来说，里面的雨线都是一个近似的 blur kernel。</p><p><img src="https://i.loli.net/2018/09/03/5b8ce3ce772c3.png" alt=""></p><p><img src="https://i.loli.net/2018/09/03/5b8d4aeaa5628.png" alt=""></p><p>作者表示很多方法都是在 high-level component 上进行去雨，然后他们就选了最好实现的 guided filter model 来当成 low-pass filter。这样就把一个 rainy patch 给 decompose 成了两个部分：texture component 和 detail component。</p><p>  texture component 会包含所有的雨线、而且还更加 sparse，所以在 texture component 上面训练就足够 sufficient 且 compact。</p><p><img src="https://i.loli.net/2018/09/03/5b8d4aeaa313f.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Rain Streak Removal for Single Image via Kernel Guided CNN&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="paperReading" scheme="https://ir1d.cf/tags/paperReading/"/>
    
  </entry>
  
  <entry>
    <title>RESCAN 踩坑</title>
    <link href="https://ir1d.cf/2018/09/01/RESCAN-%E8%B8%A9%E5%9D%91/"/>
    <id>https://ir1d.cf/2018/09/01/RESCAN-踩坑/</id>
    <published>2018-09-01T11:20:12.000Z</published>
    <updated>2018-09-12T14:24:47.264Z</updated>
    
    <content type="html"><![CDATA[<p>Recurrent Squeeze-and-Excitation Context Aggregation Net for Single Image Deraining</p><a id="more"></a><p>用 Rain 800 中的 700 张当训练集，100张当验证集，用 rain100H 中取出来的 100 张当测试集。</p><p>release 的 data 里面 test_syn 其实是 val，training 其实是 train，testset 就自己去从 rain100H 里找 100 张吧。（我也不知道，我随便说的</p><ul><li>关于 DataLoader 就挂掉的问题：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    batch_t = next(dt_train)</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    dt_train = sess.get_dataloader(<span class="string">'train'</span>)</span><br><span class="line">    batch_t = next(dt_train)</span><br></pre></td></tr></table></figure><ul><li>关于 conda 怎么也装不上 pytorch 0.4</li></ul><p>上午怎么搞都只能装上 pytorch 0.12，可能是因为 cudnn 装不上更高版本吧……</p><p>然而人家 pip 直接就上了 0.4</p><ul><li>测试用 code 运行不起来</li></ul><p>因为 dataloader 和 train 的时候的不一样……</p><p>手写一下就吼了</p><p>对于这种 combine 到一起的图，掌握了 <code>np.hsplit(a, 切分个数)</code> 的新技能= =</p><p>以及还出现了多次把 ground truth 传进去测试的情况…… 不过发现一个很有意思的事情，ground truth 传进去之后输出也会丢失细节。</p><p>以及 <code>B, O = np.hsplit(img_pair, 2)</code> 被我写成了 <code>O, B = np.hsplit(img_pair, 2)</code></p><p>测出来比它文章里高很多啊QAQ ，原来是这不同的代码测起来还可以结果不一样的。</p><ul><li>test 的时候 batch_size 改成 1</li></ul><p>刚开始直接用的训练的时候的 64， 发现不能对齐，就把数据都给转成一样大小的了</p><ul><li><p>np.rot90 到底是不是无损的</p></li><li><p>np.narrow 是对闭区间操作的 [l, l + len]</p></li><li><p>莫名其妙测出来的 ssim 0.98 最后还是因为搞错了数据集</p></li></ul><p>后来又测出来一次 0.98，仔细检查了很久过程上没有出问题…… 最后发现果然= =，大家都这么厉害了……</p><ul><li>cv2.imwrite() 和 img.imsave() 的输出效果好像不太一样，混用导致了色偏</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// import matplotlib.image as img</span><br></pre></td></tr></table></figure><p>我一起写到这里吧……</p><p>eigen13 的 code 测出来会有一圈边框…… 导致直接测的话 psnr 很低 = =，删掉边框会正常一些。</p><p>测 Rain100L 上面 psnr 现在大家做到快 40 了，真的可怕= =</p><p>话说昨天跑 DetailNet 发现它是一个一个图读进来的 hmmm</p><p>然后发现 DetailNet 只能测 RGB 的图，单通道的 model 喂不进去…… 然而 RESCAN 就可以的啧</p><p>DetailNet 训出来 Loss 很低，但是也有之前跑 SRGAN 的时候遇到的纯蓝色色块之类的现象= =</p><p>很迷，不知道为啥</p><hr><ul><li><p>cv2.imwrite() 和 matplotlib 里面的img.imsave() 不能混用</p></li><li><p>test 的时候 batch_size 要改成 1，因为两个代码都是把结果 concat 起来，可能原paper的数据集图片都是一样大的</p></li><li><p>不同的层要分开定义，否则实际上相当于 share weight 了</p></li><li><p>pytorch_total_params = sum(p.numel() for p in model.parameters())，这个会把model里定义的东西都算进去，求出来的不一定是实际上使用的 parameter 个数。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recurrent Squeeze-and-Excitation Context Aggregation Net for Single Image Deraining&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="paperReading" scheme="https://ir1d.cf/tags/paperReading/"/>
    
      <category term="python" scheme="https://ir1d.cf/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Manipulating Attributes of Natural Scenes via Hallucination</title>
    <link href="https://ir1d.cf/2018/09/01/Manipulating-Attributes-of-Natural-Scenes-via-Hallucination/"/>
    <id>https://ir1d.cf/2018/09/01/Manipulating-Attributes-of-Natural-Scenes-via-Hallucination/</id>
    <published>2018-09-01T01:43:21.000Z</published>
    <updated>2018-09-03T04:43:30.391Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Manipulating Attributes of Natural Scenes via Hallucination</li><li>Everybody Dance Now</li></ul><p>用上 hexoeditor 之后放图真心方便了</p><a id="more"></a><h2 id="Manipulating-Attributes-of-Natural-Scenes-via-Hallucination"><a href="#Manipulating-Attributes-of-Natural-Scenes-via-Hallucination" class="headerlink" title="Manipulating Attributes of Natural Scenes via Hallucination"></a>Manipulating Attributes of Natural Scenes via Hallucination</h2><p><img src="https://i.loli.net/2018/09/01/5b8a81c289931.png" alt=""></p><p>本文提出的方法可以让人们直接操作自然场景中的 high-level 信息，从而转换场景。</p><p><img src="https://i.loli.net/2018/09/01/5b8a81c256db7.png" alt=""></p><p><img src="https://i.loli.net/2018/09/01/5b8a81c38c335.png" alt=""></p><h2 id="Everybody-Dance-Now"><a href="#Everybody-Dance-Now" class="headerlink" title="Everybody Dance Now"></a>Everybody Dance Now</h2><p><img src="https://i.loli.net/2018/09/01/5b8a86f0737c3.png" alt=""></p><p><img src="https://i.loli.net/2018/09/01/5b8a86f031a06.png" alt=""></p><p><img src="https://i.loli.net/2018/09/01/5b8a86f008017.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Manipulating Attributes of Natural Scenes via Hallucination&lt;/li&gt;
&lt;li&gt;Everybody Dance Now&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用上 hexoeditor 之后放图真心方便了&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://ir1d.cf/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="paperReading" scheme="https://ir1d.cf/tags/paperReading/"/>
    
  </entry>
  
  <entry>
    <title>Gitment 配置</title>
    <link href="https://ir1d.cf/2018/08/22/gitment-%E9%85%8D%E7%BD%AE/"/>
    <id>https://ir1d.cf/2018/08/22/gitment-配置/</id>
    <published>2018-08-22T07:04:07.000Z</published>
    <updated>2018-08-22T07:45:06.460Z</updated>
    
    <content type="html"><![CDATA[<p>Gitment 原版的貌似没有在维护，后来改用了 Gitmint （加了统计和翻译），然而发现 gitment 的评论区是一个裸的 textarea，外面没有包上 form，然后 mkdocs-material 是判断不在 form 里来触发搜索功能的关键字的…… <a href="https://github.com/Ir1d/gitment/issues/20" target="_blank" rel="noopener">https://github.com/Ir1d/gitment/issues/20</a> （鸣谢褚老板发现这个坑）</p><p>然后为了修这个给 mkdocs-material 开 pr，人家表示正常的 textarea 都在 form 里面，你这种完全可以通过自定义 gitment 来搞定。</p><p>搜了下发现需要改 gitment 里面 render 的过程：<a href="https://github.com/24OI/OI-wiki/blob/master/static/disqus.html#L13-L26" target="_blank" rel="noopener">https://github.com/24OI/OI-wiki/blob/master/static/disqus.html#L13-L26</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const myTheme = &#123;</span><br><span class="line">  render(state, instance) &#123;</span><br><span class="line">    const container = document.createElement(&apos;div&apos;)</span><br><span class="line">    container.lang = &quot;zh-CN&quot;</span><br><span class="line">    container.className = &apos;gitment-container gitment-root-container&apos;</span><br><span class="line">    const divv = document.createElement(&apos;form&apos;)</span><br><span class="line">    // container.appendChild(instance.renderSomething(state, instan)</span><br><span class="line">    container.appendChild(instance.renderHeader(state, instance))</span><br><span class="line">    divv.appendChild(instance.renderEditor(state, instance))</span><br><span class="line">    container.appendChild(divv)</span><br><span class="line">    container.appendChild(instance.renderComments(state, instance))</span><br><span class="line">    container.appendChild(instance.renderFooter(state, instance))</span><br><span class="line">    return container</span><br><span class="line">  &#125;,</span><br><span class="line">  renderSomething(state, instance) &#123;</span><br><span class="line">    const container = document.createElement(&apos;div&apos;)</span><br><span class="line">    container.lang = &quot;zh-CN&quot;</span><br><span class="line">    if (state.user.login) &#123;</span><br><span class="line">      container.innerText = `Hello, $&#123;state.user.login&#125;, 来说点什么吧？`</span><br><span class="line">    &#125;</span><br><span class="line">    return container</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">const gitment = new Gitment(&#123;</span><br><span class="line">  id: &apos;&#123;&#123; page.title | default(&quot;404&quot;, true)  &#125;&#125;&apos;,</span><br><span class="line">  theme: myTheme,</span><br><span class="line">  owner: &apos;Ir1d&apos;,</span><br><span class="line">  repo: &apos;gitment&apos;,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: &apos;d6a911c8fba0194626d4&apos;,</span><br><span class="line">    client_secret: &apos;867ec7e13cc99b420bd147cbb62d5cfec271ba81&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(&apos;gitment_container&apos;)</span><br></pre></td></tr></table></figure><p>然后直接推上生产（昨晚 Travis CI 和 Github 的通讯 bug 了，CI 过了但是 Github 上还是 pending = =）</p><p>然后发现点预览的时候会刷新整个页面= =，然后之前评论框里还没有提交的东西就丢了= =</p><p>搜了下发现 form 里面的 button 需要加上个 <code>type=&#39;button&#39;</code> 才可以不跳转。</p><p>这个就必须要改 renderEditor 里面的东西了，索性把整个 gitment.js 都给换掉好了……</p><p>在 gitment 的 issue 里搜了下，发现 <a href="https://www.kymjs.com" target="_blank" rel="noopener">https://www.kymjs.com</a> 的这位大佬搞了个翻译好的，就稍微改下，拿过来用了。</p><p>修改在：<a href="https://github.com/24OI/24oi.github.io/blob/master/gitment.js#L3063" target="_blank" rel="noopener">https://github.com/24OI/24oi.github.io/blob/master/gitment.js#L3063</a></p><p>其他的修改都是细节上魔改，与整体配置无关（x</p><p>所以就让 mkdocs 用上 gitment 啦！</p><p>完整配置在：<a href="https://github.com/24OI/OI-wiki/blob/master/static/disqus.html" target="_blank" rel="noopener">https://github.com/24OI/OI-wiki/blob/master/static/disqus.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Gitment 原版的貌似没有在维护，后来改用了 Gitmint （加了统计和翻译），然而发现 gitment 的评论区是一个裸的 textarea，外面没有包上 form，然后 mkdocs-material 是判断不在 form 里来触发搜索功能的关键字的…… &lt;a h
      
    
    </summary>
    
      <category term="操作" scheme="https://ir1d.cf/categories/%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="gitment" scheme="https://ir1d.cf/tags/gitment/"/>
    
      <category term="github" scheme="https://ir1d.cf/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Nginx HTTPS 配置</title>
    <link href="https://ir1d.cf/2018/08/22/nginx-HTTPS-%E9%85%8D%E7%BD%AE/"/>
    <id>https://ir1d.cf/2018/08/22/nginx-HTTPS-配置/</id>
    <published>2018-08-22T06:50:44.000Z</published>
    <updated>2018-09-30T04:20:06.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="https://bjornjohansen.no/optimizing-https-nginx" target="_blank" rel="noopener">https://bjornjohansen.no/optimizing-https-nginx</a></p><p>这一套文都很厉害，包含了 nginx 以及 openssl 的安装、配置、优化。</p><p>以及真的佩服这位 dalao 给每篇文章都配上插图。</p><h2 id="两个生成配置用的工具"><a href="#两个生成配置用的工具" class="headerlink" title="两个生成配置用的工具"></a>两个生成配置用的工具</h2><p><a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/" target="_blank" rel="noopener">https://mozilla.github.io/server-side-tls/ssl-config-generator/</a></p><p><a href="https://wiki.mozilla.org/Security/Server_Side_TLS" target="_blank" rel="noopener">https://wiki.mozilla.org/Security/Server_Side_TLS</a></p><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><p><a href="https://myssl.com/" target="_blank" rel="noopener">https://myssl.com/</a></p><p><a href="https://www.ssllabs.com" target="_blank" rel="noopener">https://www.ssllabs.com</a></p><h2 id="acme-sh"><a href="#acme-sh" class="headerlink" title="acme.sh"></a>acme.sh</h2><p><a href="https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert</a></p><p>wiki 里面没有说多个域名怎么配，其实就是直接把单个域名的合到一起就好了。就比如我</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue  -d oi-wiki.org -d *.oi-wiki.org -d oi-wiki.cf -d *.oi-wiki.cf --dns dns_dp</span><br></pre></td></tr></table></figure><p>这里 dns_dp 是指 dnspod，第一个 -d 后面的域名是会显示在证书上（比如说访问 <a href="https://oi-wiki.cf" target="_blank" rel="noopener">https://oi-wiki.cf</a> ，会显示证书是给 <a href="https://oi-wiki.org" target="_blank" rel="noopener">https://oi-wiki.org</a> 的）。</p><p>用 dns 来验证真的方便，因为配了旧域名到新域名的跳转，nginx 验证总是不过。</p><p>改成 dns 之后就一波带走…… </p><p><a href="https://github.com/Neilpang/acme.sh/tree/master/dnsapi" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/tree/master/dnsapi</a></p><h2 id="brotli"><a href="#brotli" class="headerlink" title="brotli"></a>brotli</h2><p><a href="https://www.howtoing.com/how-to-install-nginx-with-brotli-compression-on-ubuntu-1804" target="_blank" rel="noopener">https://www.howtoing.com/how-to-install-nginx-with-brotli-compression-on-ubuntu-1804</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;教程&quot;&gt;&lt;a href=&quot;#教程&quot; class=&quot;headerlink&quot; title=&quot;教程&quot;&gt;&lt;/a&gt;教程&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://bjornjohansen.no/optimizing-https-nginx&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="操作" scheme="https://ir1d.cf/categories/%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="nginx" scheme="https://ir1d.cf/tags/nginx/"/>
    
      <category term="https" scheme="https://ir1d.cf/tags/https/"/>
    
  </entry>
  
</feed>
